#include "common.h"

#if HAS_COORDINATE_MAP // IS_FIBONACCI implies HAS_COORDINATE_MAP

// Each Fibonacci board must define the following arrays:
//
// physicalToFibonacci[] === given physical pixel number, get it's order if sorted by distance from center (radius, aka the vogel spiral order)
// fibonacciToPhysical[] === given index to pixel in radial order (vogel spiral order), get physical pixel index
// angles[]              === angle, using units where 256 units == 360 degrees
// coordsX[] / coordsY[] === uint8_t coordinates for transformed spiral
//
// All boards appear to use the vogel model, with offset to first point == 0.
// [[ This can be confirmed by first element of angles[] === 0,
//    i.e., the first point is the center of the spiral at origin (x=0, y=0)
// ]]
//
// 1. Using radial coordinates, the Nth pixel's position is defined as:
// ```
// r = sqrt(n)
// theta = n * GOLDEN_ANGLE
// ```
//
// 2. Calculate all coordinates, giving Vogel's model centered at the origin
//
// 3. Store theta in `angles[]` (after converting to units where 256 units == 360 degrees)
//
// 4. Convert the radial coordinates to cartesian (x/y) coordinates
//
// 5. Transform the coordinates, such as via following pseudo-code:
//
// ```C++
// // first, translate from origin == center so left side and bottom aligned with X/Y axis
// double shiftX := min(originalCoordinatesX[]);
// double shiftY := min(originalCoordinatesY[]);
// double translatedX[] <== originalCoordinatesX[] - shiftX; // shifts right to align left side with X=0
// double translatedY[] = originalCoordinatesY[] - shiftY; // shifts upward to align bottom with Y=0
// // next, scale so that values lie entirely within the range [ 0.0 ... 256.0 ]
// double maxXY = max(max(translatedX[]), max(translatedY[]);
// double scaleFactor = 256.0 / maxXY;
// double scaledX[] = translatedX[] * scaleFactor;
// double scaledY[] = translatedY[] * scaleFactor;
// // finally, convert to integer values in the range [ 0 ... 255 ]
// uint8_t coordsX[] = (uint8_t)(scaledX[] - 0.5); // subtract 0.5 to avoid bias
// uint8_t coordsY[] = (uint8_t)(scaledY[] - 0.5); // subtract 0.5 to avoid bias
// ```
//
// There appears to have been a conscious decision to store the X/Y
// values as 8-bit values.  Perhaps this was to allow for faster
// (8-bit) math operations on lower-power MCUs?
//
// Of course, the supported boards are ESP8266 or ESP32 (or SAMD21E),
// each of which are 32-bit native processors.  If this was on AVR,
// the continued use of 8-bit algorithms would be more critical.
//

#if defined(PRODUCT_FIBONACCI1024)
  const uint16_t physicalToFibonacci[NUM_PIXELS]   { 0, 55, 110, 165, 220, 275, 330, 385, 440, 495, 550, 605, 660, 715, 770, 825, 880, 935, 990, 1011, 956, 901, 846, 791, 736, 681, 626, 571, 516, 461, 406, 351, 296, 241, 186, 131, 76, 21, 42, 97, 152, 207, 262, 317, 372, 427, 482, 537, 592, 647, 702, 757, 812, 867, 922, 977, 998, 943, 888, 833, 778, 723, 668, 613, 558, 503, 448, 393, 338, 283, 228, 173, 118, 63, 8, 29, 84, 139, 194, 249, 304, 359, 414, 469, 524, 579, 634, 689, 744, 799, 854, 909, 964, 1019, 985, 930, 875, 820, 765, 710, 655, 600, 545, 490, 435, 380, 325, 270, 215, 160, 105, 50, 16, 71, 126, 181, 236, 291, 346, 401, 456, 511, 566, 621, 676, 731, 786, 841, 896, 951, 1006, 972, 917, 862, 807, 752, 697, 642, 587, 532, 477, 422, 367, 312, 257, 202, 147, 92, 37, 3, 58, 113, 168, 223, 278, 333, 388, 443, 498, 553, 608, 663, 718, 773, 828, 883, 938, 993, 1014, 959, 904, 849, 794, 739, 684, 629, 574, 519, 464, 409, 354, 299, 244, 189, 134, 79, 24, 45, 100, 155, 210, 265, 320, 375, 430, 485, 540, 595, 650, 705, 760, 815, 870, 925, 980, 11, 66, 121, 176, 231, 286, 341, 396, 451, 506, 561, 616, 671, 726, 781, 836, 891, 946, 1001, 1022, 967, 912, 857, 802, 747, 692, 637, 582, 527, 472, 417, 362, 307, 252, 197, 142, 87, 32, 53, 108, 163, 218, 273, 328, 383, 438, 493, 548, 603, 658, 713, 768, 823, 878, 933, 988, 1009, 954, 899, 844, 789, 734, 679, 624, 569, 514, 459, 404, 349, 294, 239, 184, 129, 74, 19, 40, 95, 150, 205, 260, 315, 370, 425, 480, 535, 590, 645, 700, 755, 810, 865, 920, 975, 996, 941, 886, 831, 776, 721, 666, 611, 556, 501, 446, 391, 336, 281, 226, 171, 116, 61, 6, 27, 82, 137, 192, 247, 302, 357, 412, 467, 522, 577, 632, 687, 742, 797, 852, 907, 962, 1017, 983, 928, 873, 818, 763, 708, 653, 598, 543, 488, 433, 378, 323, 268, 213, 158, 103, 48, 14, 69, 124, 179, 234, 289, 344, 399, 454, 509, 564, 619, 674, 729, 784, 839, 894, 949, 1004, 970, 915, 860, 805, 750, 695, 640, 585, 530, 475, 420, 365, 310, 255, 200, 145, 90, 35, 1, 56, 111, 166, 221, 276, 331, 386, 441, 496, 551, 606, 661, 716, 771, 826, 881, 936, 991, 22, 77, 132, 187, 242, 297, 352, 407, 462, 517, 572, 627, 682, 737, 792, 847, 902, 957, 1012, 978, 923, 868, 813, 758, 703, 648, 593, 538, 483, 428, 373, 318, 263, 208, 153, 98, 43, 9, 64, 119, 174, 229, 284, 339, 394, 449, 504, 559, 614, 669, 724, 779, 834, 889, 944, 999, 1020, 965, 910, 855, 800, 745, 690, 635, 580, 525, 470, 415, 360, 305, 250, 195, 140, 85, 30, 51, 106, 161, 216, 271, 326, 381, 436, 491, 546, 601, 656, 711, 766, 821, 876, 931, 986, 1007, 952, 897, 842, 787, 732, 677, 622, 567, 512, 457, 402, 347, 292, 237, 182, 127, 72, 17, 38, 93, 148, 203, 258, 313, 368, 423, 478, 533, 588, 643, 698, 753, 808, 863, 918, 973, 994, 939, 884, 829, 774, 719, 664, 609, 554, 499, 444, 389, 334, 279, 224, 169, 114, 59, 4, 25, 80, 135, 190, 245, 300, 355, 410, 465, 520, 575, 630, 685, 740, 795, 850, 905, 960, 1015, 981, 926, 871, 816, 761, 706, 651, 596, 541, 486, 431, 376, 321, 266, 211, 156, 101, 46, 12, 67, 122, 177, 232, 287, 342, 397, 452, 507, 562, 617, 672, 727, 782, 837, 892, 947, 1002, 33, 88, 143, 198, 253, 308, 363, 418, 473, 528, 583, 638, 693, 748, 803, 858, 913, 968, 1023, 989, 934, 879, 824, 769, 714, 659, 604, 549, 494, 439, 384, 329, 274, 219, 164, 109, 54, 20, 75, 130, 185, 240, 295, 350, 405, 460, 515, 570, 625, 680, 735, 790, 845, 900, 955, 1010, 976, 921, 866, 811, 756, 701, 646, 591, 536, 481, 426, 371, 316, 261, 206, 151, 96, 41, 7, 62, 117, 172, 227, 282, 337, 392, 447, 502, 557, 612, 667, 722, 777, 832, 887, 942, 997, 1018, 963, 908, 853, 798, 743, 688, 633, 578, 523, 468, 413, 358, 303, 248, 193, 138, 83, 28, 49, 104, 159, 214, 269, 324, 379, 434, 489, 544, 599, 654, 709, 764, 819, 874, 929, 984, 1005, 950, 895, 840, 785, 730, 675, 620, 565, 510, 455, 400, 345, 290, 235, 180, 125, 70, 15, 36, 91, 146, 201, 256, 311, 366, 421, 476, 531, 586, 641, 696, 751, 806, 861, 916, 971, 992, 937, 882, 827, 772, 717, 662, 607, 552, 497, 442, 387, 332, 277, 222, 167, 112, 57, 2, 23, 78, 133, 188, 243, 298, 353, 408, 463, 518, 573, 628, 683, 738, 793, 848, 903, 958, 1013, 44, 99, 154, 209, 264, 319, 374, 429, 484, 539, 594, 649, 704, 759, 814, 869, 924, 979, 1000, 945, 890, 835, 780, 725, 670, 615, 560, 505, 450, 395, 340, 285, 230, 175, 120, 65, 10, 31, 86, 141, 196, 251, 306, 361, 416, 471, 526, 581, 636, 691, 746, 801, 856, 911, 966, 1021, 987, 932, 877, 822, 767, 712, 657, 602, 547, 492, 437, 382, 327, 272, 217, 162, 107, 52, 18, 73, 128, 183, 238, 293, 348, 403, 458, 513, 568, 623, 678, 733, 788, 843, 898, 953, 1008, 974, 919, 864, 809, 754, 699, 644, 589, 534, 479, 424, 369, 314, 259, 204, 149, 94, 39, 5, 60, 115, 170, 225, 280, 335, 390, 445, 500, 555, 610, 665, 720, 775, 830, 885, 940, 995, 1016, 961, 906, 851, 796, 741, 686, 631, 576, 521, 466, 411, 356, 301, 246, 191, 136, 81, 26, 47, 102, 157, 212, 267, 322, 377, 432, 487, 542, 597, 652, 707, 762, 817, 872, 927, 982, 1003, 948, 893, 838, 783, 728, 673, 618, 563, 508, 453, 398, 343, 288, 233, 178, 123, 68, 13, 34, 89, 144, 199, 254, 309, 364, 419, 474, 529, 584, 639, 694, 749, 804, 859, 914, 969 };
  const uint16_t fibonacciToPhysical[NUM_PIXELS]   {};
  const uint8_t  coordsX[NUM_PIXELS]               { 130, 157, 169, 178, 185, 192, 197, 201, 204, 207, 209, 211, 212, 212, 211, 210, 209, 206, 204, 190, 194, 197, 200, 202, 203, 204, 204, 204, 203, 201, 198, 195, 191, 186, 180, 172, 162, 146, 152, 165, 173, 180, 185, 189, 192, 194, 196, 197, 197, 196, 195, 193, 191, 188, 184, 180, 165, 170, 174, 178, 181, 184, 186, 188, 189, 189, 189, 188, 186, 183, 179, 173, 166, 157, 138, 146, 159, 167, 172, 176, 179, 181, 182, 182, 181, 180, 178, 175, 172, 168, 164, 159, 154, 149, 138, 144, 149, 154, 159, 163, 166, 169, 172, 173, 174, 174, 174, 172, 169, 165, 159, 150, 140, 152, 158, 163, 165, 167, 167, 167, 165, 163, 161, 158, 154, 149, 145, 139, 134, 127, 121, 111, 117, 124, 130, 135, 140, 145, 149, 152, 155, 158, 159, 160, 160, 159, 156, 152, 144, 132, 145, 150, 152, 153, 153, 152, 150, 148, 144, 141, 136, 131, 126, 120, 114, 108, 101, 94, 77, 85, 92, 99, 105, 112, 117, 123, 128, 133, 137, 140, 143, 145, 147, 147, 146, 143, 137, 137, 140, 141, 141, 139, 137, 133, 130, 125, 120, 115, 109, 103, 97, 90, 83, 76, 69, 131, 135, 136, 135, 133, 130, 127, 123, 118, 113, 108, 102, 95, 89, 82, 75, 68, 61, 54, 40, 47, 54, 61, 68, 75, 82, 88, 95, 101, 107, 112, 117, 121, 125, 128, 130, 132, 131, 128, 127, 124, 120, 116, 111, 106, 101, 95, 89, 82, 75, 69, 62, 55, 48, 41, 34, 22, 29, 36, 42, 49, 56, 63, 70, 76, 83, 89, 95, 101, 107, 112, 116, 120, 124, 126, 123, 118, 113, 108, 103, 97, 91, 85, 78, 72, 65, 58, 51, 45, 38, 31, 25, 18, 10, 16, 22, 28, 34, 41, 48, 54, 61, 68, 74, 81, 87, 94, 100, 106, 112, 117, 124, 119, 111, 105, 98, 91, 85, 78, 71, 65, 58, 51, 45, 38, 32, 26, 20, 14, 8, 3, 3, 8, 13, 18, 24, 30, 36, 42, 49, 56, 62, 69, 76, 83, 90, 97, 105, 113, 118, 107, 98, 90, 82, 75, 68, 61, 54, 48, 41, 35, 29, 23, 18, 13, 8, 4, 0, 2, 6, 10, 14, 19, 24, 29, 35, 41, 47, 54, 60, 68, 75, 83, 91, 100, 111, 123, 104, 93, 84, 76, 68, 61, 54, 47, 41, 35, 30, 25, 20, 16, 12, 8, 5, 3, 111, 97, 87, 78, 70, 62, 55, 49, 43, 37, 32, 27, 22, 18, 15, 12, 9, 7, 6, 11, 12, 14, 16, 19, 22, 25, 29, 34, 39, 45, 51, 57, 64, 72, 81, 91, 104, 116, 97, 85, 76, 67, 60, 53, 47, 42, 37, 33, 29, 26, 23, 21, 19, 18, 18, 17, 26, 25, 24, 25, 25, 26, 28, 31, 33, 37, 41, 46, 51, 57, 64, 71, 80, 91, 106, 99, 86, 76, 68, 61, 55, 50, 46, 42, 39, 36, 34, 33, 32, 32, 32, 33, 34, 46, 43, 41, 40, 39, 39, 39, 40, 42, 44, 47, 51, 55, 60, 66, 73, 82, 93, 110, 102, 89, 79, 72, 65, 60, 56, 53, 50, 48, 47, 46, 46, 47, 48, 50, 52, 55, 69, 65, 62, 59, 57, 55, 54, 54, 54, 55, 57, 59, 62, 66, 71, 78, 86, 97, 119, 108, 93, 84, 78, 72, 68, 65, 63, 62, 61, 61, 62, 64, 66, 68, 71, 75, 79, 84, 95, 90, 85, 81, 78, 75, 72, 70, 69, 69, 69, 70, 72, 75, 79, 84, 92, 102, 115, 99, 91, 85, 81, 79, 77, 76, 76, 77, 79, 81, 83, 87, 91, 95, 100, 105, 111, 109, 98, 92, 88, 86, 84, 84, 84, 85, 87, 89, 92, 96, 100, 105, 110, 116, 122, 128, 138, 132, 126, 120, 114, 109, 105, 101, 98, 95, 93, 91, 91, 91, 92, 95, 99, 106, 115, 106, 101, 99, 98, 98, 99, 100, 103, 106, 110, 114, 118, 124, 129, 135, 142, 148, 155, 165, 158, 151, 145, 138, 133, 127, 122, 118, 114, 110, 108, 106, 104, 104, 105, 108, 113, 122, 114, 111, 110, 111, 112, 114, 117, 121, 125, 130, 135, 141, 147, 153, 160, 167, 174, 181, 197, 189, 182, 175, 168, 161, 155, 149, 143, 138, 133, 128, 124, 121, 118, 116, 116, 116, 120, 121, 121, 122, 124, 127, 130, 135, 139, 145, 150, 156, 162, 169, 176, 183, 190, 197, 204, 218, 211, 203, 196, 189, 182, 176, 169, 163, 157, 151, 145, 140, 136, 132, 128, 126, 125, 125, 127, 129, 132, 136, 140, 145, 151, 156, 162, 169, 175, 182, 188, 195, 202, 209, 216, 223, 234, 228, 221, 214, 207, 201, 194, 187, 180, 174, 167, 161, 155, 150, 144, 140, 135, 131, 128, 131, 137, 142, 147, 153, 159, 165, 171, 178, 185, 191, 198, 205, 212, 218, 225, 231, 237, 243, 136, 143, 149, 155, 162, 168, 175, 182, 188, 195, 202, 208, 215, 221, 228, 234, 240, 245, 251, 246, 241, 235, 230, 224, 217, 211, 204, 198, 191, 184, 177, 170, 164, 157, 150, 142, 133, 139, 149, 157, 164, 172, 179, 186, 193, 200, 206, 213, 219, 225, 231, 236, 241, 246, 251, 255, 253, 250, 245, 241, 236, 231, 225, 220, 213, 207, 200, 194, 187, 179, 172, 164, 156, 146, 139, 153, 162, 171, 179, 187, 194, 201, 207, 213, 219, 225, 230, 235, 240, 244, 247, 251, 253, 249, 247, 244, 241, 237, 233, 229, 224, 218, 212, 206, 200, 193, 185, 178, 169, 159, 147, 135, 154, 166, 175, 183, 191, 198, 205, 211, 216, 222, 226, 231, 234, 238, 241, 243, 245, 246, 240, 240, 239, 238, 236, 234, 231, 227, 223, 219, 214, 208, 202, 196, 189, 181, 171, 161, 146, 154, 167, 177, 185, 192, 199, 205, 210, 215, 219, 223, 226, 229, 231, 232, 233, 233, 233, 224, 225, 226, 226, 226, 225, 223, 221, 218, 215, 211, 206, 201, 195, 188, 181, 171, 160, 142, 151, 165, 175, 184, 191, 197, 202, 206, 210, 213, 215, 217, 218, 219, 219, 218, 217, 215 };
  const uint8_t  coordsY[NUM_PIXELS]               { 127, 125, 123, 119, 115, 110, 105, 99, 93, 87, 81, 74, 68, 61, 54, 47, 40, 33, 27, 16, 23, 29, 36, 42, 49, 56, 63, 69, 76, 82, 89, 95, 101, 106, 111, 116, 120, 124, 120, 115, 109, 103, 97, 91, 85, 78, 72, 65, 58, 52, 45, 38, 32, 26, 19, 13, 6, 11, 17, 23, 29, 35, 42, 48, 55, 62, 69, 75, 82, 89, 95, 101, 108, 114, 123, 117, 108, 101, 94, 87, 80, 73, 66, 59, 53, 46, 40, 33, 27, 21, 16, 10, 5, 1, 2, 6, 10, 15, 21, 26, 32, 38, 45, 51, 58, 65, 72, 79, 86, 93, 101, 110, 116, 104, 95, 86, 78, 71, 64, 57, 50, 44, 38, 32, 26, 21, 16, 11, 7, 3, 0, 3, 6, 9, 13, 17, 22, 27, 32, 38, 44, 50, 57, 64, 72, 79, 88, 97, 109, 121, 102, 91, 81, 73, 65, 58, 51, 45, 39, 34, 29, 24, 20, 16, 12, 9, 7, 5, 9, 10, 12, 14, 16, 19, 23, 27, 31, 36, 41, 47, 53, 60, 67, 75, 84, 95, 110, 102, 89, 79, 70, 63, 56, 50, 44, 39, 34, 30, 26, 23, 21, 19, 17, 16, 16, 114, 95, 84, 74, 66, 59, 53, 47, 42, 38, 34, 31, 28, 26, 24, 23, 23, 23, 23, 33, 31, 30, 30, 30, 30, 32, 33, 36, 39, 42, 47, 51, 57, 63, 71, 79, 90, 104, 98, 85, 76, 68, 62, 56, 51, 47, 44, 41, 39, 38, 37, 37, 37, 38, 40, 42, 54, 51, 49, 47, 45, 45, 44, 45, 46, 47, 50, 53, 57, 61, 67, 74, 82, 92, 109, 102, 89, 80, 73, 67, 62, 59, 56, 54, 53, 52, 52, 53, 54, 56, 58, 61, 64, 79, 75, 71, 67, 65, 62, 61, 60, 59, 60, 61, 62, 65, 69, 73, 79, 87, 97, 117, 108, 94, 86, 80, 75, 72, 69, 68, 67, 67, 68, 69, 71, 74, 77, 80, 85, 89, 95, 105, 100, 95, 90, 86, 83, 80, 77, 76, 75, 74, 75, 76, 78, 82, 86, 93, 103, 114, 101, 93, 88, 85, 83, 82, 82, 82, 84, 86, 88, 92, 96, 100, 105, 110, 116, 122, 132, 126, 120, 115, 109, 105, 101, 97, 94, 92, 90, 89, 89, 90, 92, 95, 100, 109, 124, 108, 102, 98, 96, 96, 96, 97, 99, 102, 105, 109, 114, 119, 124, 130, 136, 142, 149, 116, 108, 105, 103, 102, 103, 105, 107, 110, 113, 118, 122, 127, 133, 139, 145, 152, 159, 166, 175, 168, 161, 154, 148, 142, 136, 130, 126, 121, 117, 114, 111, 110, 109, 109, 111, 115, 122, 116, 114, 114, 116, 118, 121, 124, 128, 133, 138, 144, 150, 156, 162, 169, 176, 183, 191, 205, 198, 191, 184, 177, 170, 163, 157, 151, 145, 140, 135, 131, 127, 124, 121, 120, 119, 121, 123, 124, 126, 129, 132, 136, 141, 146, 152, 158, 164, 170, 177, 184, 191, 198, 205, 212, 225, 218, 211, 204, 197, 190, 183, 177, 170, 164, 158, 152, 146, 141, 137, 133, 130, 127, 126, 129, 132, 136, 141, 146, 151, 157, 163, 169, 175, 182, 189, 195, 202, 209, 216, 223, 229, 239, 233, 227, 220, 214, 207, 200, 193, 187, 180, 173, 167, 161, 155, 149, 144, 139, 134, 128, 133, 140, 146, 152, 158, 164, 170, 177, 184, 190, 197, 204, 210, 217, 223, 230, 236, 241, 247, 248, 243, 237, 232, 226, 220, 213, 207, 200, 193, 187, 180, 173, 166, 160, 153, 146, 139, 134, 145, 153, 160, 168, 175, 182, 189, 195, 202, 209, 215, 221, 227, 233, 238, 243, 248, 253, 141, 151, 160, 168, 175, 183, 190, 197, 203, 210, 216, 222, 228, 233, 238, 243, 247, 251, 255, 252, 249, 246, 242, 237, 232, 227, 222, 216, 210, 204, 197, 190, 183, 175, 167, 158, 148, 141, 155, 165, 174, 182, 189, 196, 203, 209, 215, 221, 226, 231, 235, 239, 243, 246, 249, 251, 246, 245, 242, 240, 236, 233, 229, 224, 219, 214, 208, 202, 195, 188, 180, 171, 161, 149, 137, 156, 167, 177, 185, 193, 199, 206, 211, 217, 221, 226, 229, 233, 235, 238, 239, 241, 241, 234, 235, 234, 234, 232, 231, 228, 225, 222, 218, 213, 208, 203, 196, 189, 182, 173, 162, 147, 154, 167, 177, 185, 193, 199, 205, 209, 214, 217, 221, 223, 225, 226, 227, 228, 227, 226, 216, 218, 219, 220, 220, 220, 219, 217, 215, 212, 209, 205, 200, 195, 188, 181, 172, 160, 143, 151, 165, 175, 183, 190, 195, 200, 204, 207, 209, 211, 212, 213, 213, 212, 211, 209, 207, 194, 198, 200, 203, 204, 205, 206, 206, 205, 203, 201, 198, 194, 190, 184, 177, 169, 157, 133, 146, 161, 171, 178, 184, 188, 192, 195, 197, 198, 198, 198, 197, 196, 194, 191, 188, 184, 180, 152, 164, 172, 178, 182, 186, 188, 190, 191, 191, 190, 189, 187, 185, 182, 178, 174, 170, 154, 159, 164, 168, 172, 176, 178, 181, 182, 183, 183, 183, 181, 179, 176, 171, 165, 156, 139, 146, 157, 164, 169, 172, 174, 176, 176, 175, 174, 172, 170, 167, 163, 159, 154, 149, 143, 137, 127, 133, 139, 144, 149, 154, 158, 161, 164, 166, 168, 168, 168, 167, 165, 162, 157, 149, 139, 150, 155, 159, 161, 161, 161, 160, 158, 156, 153, 149, 145, 140, 135, 129, 123, 116, 110, 100, 107, 113, 119, 125, 131, 136, 140, 144, 148, 151, 153, 154, 155, 154, 152, 149, 142, 132, 142, 146, 148, 148, 147, 146, 143, 140, 136, 132, 127, 122, 116, 110, 104, 97, 90, 83, 67, 75, 82, 89, 95, 102, 108, 114, 119, 124, 129, 133, 136, 139, 141, 142, 142, 140, 136, 135, 137, 137, 135, 133, 130, 126, 122, 117, 112, 106, 100, 94, 87, 81, 74, 66, 59, 45, 52, 59, 66, 73, 80, 87, 93, 99, 105, 111, 116, 120, 124, 128, 130, 132, 132, 130, 129, 128, 126, 123, 119, 115, 110, 105, 99, 93, 87, 80, 74, 67, 60, 53, 46, 39 };
  const uint8_t  angles[NUM_PIXELS]                { 255, 2, 4, 6, 8, 10, 12, 14, 16, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 43, 41, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 9, 7, 5, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 36, 38, 40, 42, 44, 46, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 24, 22, 20, 18, 16, 14, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 47, 49, 51, 53, 55, 57, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 39, 37, 35, 33, 31, 29, 27, 25, 28, 30, 32, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 62, 64, 66, 69, 67, 65, 63, 61, 59, 57, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 37, 39, 41, 43, 45, 47, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 80, 78, 76, 74, 72, 70, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 48, 50, 52, 54, 56, 58, 60, 62, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 51, 53, 55, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 85, 87, 89, 94, 92, 90, 88, 86, 84, 82, 80, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 62, 64, 66, 68, 70, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 103, 101, 99, 97, 95, 93, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 71, 73, 75, 77, 79, 81, 83, 85, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 112, 110, 108, 105, 103, 101, 99, 97, 95, 93, 91, 89, 87, 85, 83, 81, 78, 76, 74, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 103, 105, 107, 109, 111, 113, 115, 117, 120, 118, 116, 114, 112, 110, 108, 106, 104, 102, 100, 98, 96, 93, 91, 89, 87, 85, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 116, 118, 120, 122, 124, 126, 129, 127, 125, 123, 121, 119, 117, 115, 113, 111, 108, 106, 104, 102, 100, 98, 96, 94, 97, 99, 101, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 131, 133, 135, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 141, 139, 137, 135, 133, 131, 129, 127, 125, 123, 121, 119, 116, 114, 112, 110, 108, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 139, 141, 143, 145, 147, 149, 154, 152, 150, 148, 146, 144, 142, 140, 138, 136, 134, 132, 129, 127, 125, 123, 121, 119, 117, 122, 124, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 154, 156, 158, 163, 161, 159, 157, 155, 153, 151, 149, 147, 144, 142, 140, 138, 136, 134, 132, 130, 128, 126, 131, 133, 135, 137, 139, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 172, 170, 168, 166, 164, 162, 159, 157, 155, 153, 151, 149, 147, 145, 143, 141, 139, 137, 135, 140, 142, 144, 146, 148, 150, 152, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 181, 179, 177, 174, 172, 170, 168, 166, 164, 162, 160, 158, 156, 154, 152, 150, 147, 145, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 170, 172, 174, 176, 178, 180, 182, 184, 186, 154, 156, 158, 160, 162, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 192, 195, 193, 191, 189, 187, 185, 182, 180, 178, 176, 174, 172, 170, 168, 166, 164, 162, 160, 163, 165, 167, 169, 171, 173, 175, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 204, 202, 200, 197, 195, 193, 191, 189, 187, 185, 183, 181, 179, 177, 175, 173, 170, 168, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 193, 195, 197, 199, 201, 203, 205, 207, 209, 215, 212, 210, 208, 206, 204, 202, 200, 198, 196, 194, 192, 190, 188, 186, 183, 181, 179, 177, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 208, 210, 212, 214, 216, 218, 223, 221, 219, 217, 215, 213, 211, 209, 207, 205, 203, 201, 198, 196, 194, 192, 190, 188, 186, 191, 193, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 223, 225, 227, 232, 230, 228, 226, 224, 222, 220, 218, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 200, 202, 204, 206, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 238, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 231, 233, 235, 237, 239, 241, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226, 224, 221, 219, 217, 215, 213, 211, 209, 214, 216, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 246, 248, 250, 252, 0, 253, 251, 249, 247, 245, 243, 241, 239, 236, 234, 232, 230, 228, 226, 224, 222, 220, 223, 225, 227, 229, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 1, 3, 5, 9, 7, 5, 3, 0, 254, 251, 249, 247, 245, 243, 241, 239, 237, 235, 233, 231, 229, 232, 234, 236, 238, 240, 242, 244, 247, 249, 251, 253, 255, 2, 4, 6, 8, 10, 12, 14, 20, 18, 16, 13, 11, 9, 7, 5, 3, 1, 254, 252, 250, 248, 246, 244, 242, 240, 237, 243, 245, 247, 249, 251, 253, 0, 2, 4, 6, 8, 11, 13, 15, 17, 19, 21, 23, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 1, 255, 252, 250, 248, 246, 252, 254, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 26, 28, 30, 32 };
  const uint8_t  radius[NUM_PIXELS]                { 0, 55, 80, 99, 115, 130, 142, 154, 165, 176, 185, 195, 204, 212, 220, 228, 236, 244, 251, 253, 246, 239, 231, 224, 215, 207, 198, 189, 179, 169, 159, 147, 135, 121, 106, 88, 66, 32, 47, 75, 95, 112, 126, 139, 152, 163, 173, 183, 193, 202, 210, 219, 227, 234, 242, 249, 252, 245, 237, 230, 222, 213, 205, 196, 187, 177, 167, 156, 144, 131, 117, 102, 83, 59, 18, 39, 69, 91, 108, 123, 136, 149, 160, 171, 181, 190, 200, 208, 217, 225, 233, 240, 247, 254, 250, 243, 235, 228, 220, 211, 203, 194, 185, 175, 164, 153, 141, 128, 114, 97, 78, 52, 27, 63, 86, 104, 120, 133, 146, 158, 168, 179, 188, 197, 206, 215, 223, 231, 238, 246, 253, 248, 241, 234, 226, 218, 210, 201, 192, 182, 172, 162, 150, 138, 125, 110, 93, 73, 44, 9, 57, 81, 100, 116, 130, 143, 155, 166, 176, 186, 195, 204, 213, 221, 229, 237, 244, 251, 254, 247, 239, 232, 224, 216, 207, 199, 190, 180, 170, 159, 148, 135, 122, 106, 89, 67, 35, 49, 76, 96, 112, 127, 140, 152, 163, 174, 184, 193, 202, 211, 219, 227, 235, 242, 249, 22, 61, 84, 103, 118, 132, 145, 157, 167, 178, 187, 197, 205, 214, 222, 230, 238, 245, 252, 255, 248, 240, 233, 225, 217, 209, 200, 191, 181, 171, 161, 149, 137, 124, 109, 92, 70, 41, 54, 79, 98, 115, 129, 142, 154, 165, 175, 185, 194, 203, 212, 220, 228, 236, 243, 251, 253, 246, 239, 231, 223, 215, 207, 198, 189, 179, 169, 158, 147, 134, 120, 105, 87, 65, 30, 46, 74, 94, 111, 126, 139, 151, 162, 173, 183, 192, 201, 210, 218, 226, 234, 242, 249, 252, 244, 237, 229, 221, 213, 205, 196, 187, 177, 166, 156, 144, 131, 117, 101, 82, 58, 15, 37, 68, 90, 107, 122, 136, 148, 160, 170, 181, 190, 199, 208, 216, 224, 232, 240, 247, 254, 250, 243, 235, 227, 219, 211, 203, 194, 184, 174, 164, 153, 141, 128, 113, 97, 77, 51, 25, 62, 85, 103, 119, 133, 146, 157, 168, 178, 188, 197, 206, 214, 223, 230, 238, 245, 253, 248, 241, 233, 226, 218, 209, 201, 191, 182, 172, 161, 150, 138, 125, 110, 93, 72, 43, 4, 56, 80, 99, 116, 130, 143, 154, 166, 176, 186, 195, 204, 212, 221, 229, 236, 244, 251, 33, 66, 88, 106, 121, 135, 147, 159, 170, 180, 189, 198, 207, 216, 224, 232, 239, 246, 254, 249, 242, 234, 227, 219, 210, 202, 193, 183, 173, 163, 152, 140, 127, 112, 95, 75, 48, 19, 60, 83, 102, 118, 132, 144, 156, 167, 177, 187, 196, 205, 214, 222, 230, 237, 245, 252, 255, 248, 240, 233, 225, 217, 208, 200, 191, 181, 171, 160, 149, 137, 123, 108, 91, 70, 39, 53, 78, 98, 114, 129, 142, 153, 165, 175, 185, 194, 203, 212, 220, 228, 236, 243, 250, 253, 246, 238, 231, 223, 215, 206, 198, 188, 179, 169, 158, 146, 134, 120, 104, 86, 64, 28, 45, 73, 94, 111, 125, 139, 151, 162, 173, 183, 192, 201, 210, 218, 226, 234, 241, 249, 251, 244, 237, 229, 221, 213, 204, 195, 186, 176, 166, 155, 143, 131, 116, 100, 81, 57, 12, 35, 67, 89, 107, 122, 136, 148, 159, 170, 180, 190, 199, 208, 216, 224, 232, 240, 247, 254, 250, 242, 235, 227, 219, 211, 202, 193, 184, 174, 164, 152, 140, 127, 113, 96, 76, 50, 23, 61, 84, 103, 119, 132, 145, 157, 168, 178, 188, 197, 206, 214, 222, 230, 238, 245, 252, 41, 71, 92, 109, 124, 137, 150, 161, 172, 182, 191, 200, 209, 217, 225, 233, 241, 248, 255, 251, 243, 236, 228, 220, 212, 204, 195, 185, 175, 165, 154, 142, 129, 115, 99, 80, 54, 31, 65, 87, 105, 121, 134, 147, 158, 169, 179, 189, 198, 207, 215, 223, 231, 239, 246, 253, 249, 242, 234, 226, 218, 210, 201, 192, 183, 173, 163, 151, 139, 126, 111, 95, 74, 47, 17, 59, 83, 101, 117, 131, 144, 156, 167, 177, 187, 196, 205, 213, 222, 229, 237, 244, 252, 254, 247, 240, 232, 225, 216, 208, 199, 190, 181, 171, 160, 149, 136, 123, 108, 90, 69, 38, 52, 78, 97, 114, 128, 141, 153, 164, 175, 184, 194, 203, 211, 220, 228, 235, 243, 250, 253, 246, 238, 231, 223, 215, 206, 197, 188, 178, 168, 157, 146, 133, 119, 104, 86, 63, 26, 43, 72, 93, 110, 125, 138, 150, 162, 172, 182, 192, 201, 209, 218, 226, 233, 241, 248, 251, 244, 236, 229, 221, 213, 204, 195, 186, 176, 166, 155, 143, 130, 116, 100, 81, 56, 7, 34, 66, 88, 106, 121, 135, 147, 159, 170, 180, 189, 199, 207, 216, 224, 232, 239, 247, 254, 49, 76, 96, 112, 127, 140, 152, 163, 174, 184, 193, 202, 211, 219, 227, 235, 242, 249, 252, 245, 237, 230, 222, 214, 205, 196, 187, 177, 167, 156, 145, 132, 118, 102, 84, 60, 21, 40, 70, 91, 108, 123, 137, 149, 161, 171, 181, 191, 200, 209, 217, 225, 233, 240, 248, 255, 250, 243, 236, 228, 220, 212, 203, 194, 185, 175, 165, 154, 142, 129, 114, 98, 79, 53, 29, 64, 87, 105, 120, 134, 146, 158, 169, 179, 189, 198, 207, 215, 223, 231, 239, 246, 253, 249, 241, 234, 226, 218, 210, 201, 192, 183, 173, 162, 151, 139, 126, 111, 94, 73, 45, 13, 58, 82, 101, 117, 131, 144, 155, 166, 177, 186, 196, 205, 213, 221, 229, 237, 244, 251, 254, 247, 240, 232, 224, 216, 208, 199, 190, 180, 170, 160, 148, 136, 122, 107, 89, 68, 36, 50, 77, 97, 113, 128, 141, 153, 164, 174, 184, 193, 202, 211, 219, 227, 235, 242, 250, 252, 245, 238, 230, 222, 214, 206, 197, 188, 178, 168, 157, 145, 133, 119, 103, 85, 62, 24, 42, 71, 92, 109, 124, 138, 150, 161, 172, 182, 191, 200, 209, 217, 225, 233, 241, 248 };
  const uint8_t  (&radiusProxy)[NUM_PIXELS] = radius;
#elif defined(PRODUCT_FIBONACCI512)
  const uint16_t physicalToFibonacci[NUM_PIXELS] { 510, 476, 442, 408, 374, 340, 306, 272, 238, 204, 170, 136, 102, 68, 34, 0, 13, 47, 81, 115, 149, 183, 217, 251, 285, 319, 353, 387, 421, 455, 489, 502, 468, 434, 400, 366, 332, 298, 264, 230, 196, 162, 128, 94, 60, 26, 5, 39, 73, 107, 141, 175, 209, 243, 277, 311, 345, 379, 413, 447, 481, 494, 460, 426, 392, 358, 324, 290, 256, 222, 188, 154, 120, 86, 52, 18, 31, 65, 99, 133, 167, 201, 235, 269, 303, 337, 371, 405, 439, 473, 507, 486, 452, 418, 384, 350, 316, 282, 248, 214, 180, 146, 112, 78, 44, 10, 23, 57, 91, 125, 159, 193, 227, 261, 295, 329, 363, 397, 431, 465, 499, 478, 444, 410, 376, 342, 308, 274, 240, 206, 172, 138, 104, 70, 36, 2, 15, 49, 83, 117, 151, 185, 219, 253, 287, 321, 355, 389, 423, 457, 491, 504, 470, 436, 402, 368, 334, 300, 266, 232, 198, 164, 130, 96, 62, 28, 7, 41, 75, 109, 143, 177, 211, 245, 279, 313, 347, 381, 415, 449, 483, 496, 462, 428, 394, 360, 326, 292, 258, 224, 190, 156, 122, 88, 54, 20, 33, 67, 101, 135, 169, 203, 237, 271, 305, 339, 373, 407, 441, 475, 509, 488, 454, 420, 386, 352, 318, 284, 250, 216, 182, 148, 114, 80, 46, 12, 25, 59, 93, 127, 161, 195, 229, 263, 297, 331, 365, 399, 433, 467, 501, 480, 446, 412, 378, 344, 310, 276, 242, 208, 174, 140, 106, 72, 38, 4, 17, 51, 85, 119, 153, 187, 221, 255, 289, 323, 357, 391, 425, 459, 493, 506, 472, 438, 404, 370, 336, 302, 268, 234, 200, 166, 132, 98, 64, 30, 9, 43, 77, 111, 145, 179, 213, 247, 281, 315, 349, 383, 417, 451, 485, 498, 464, 430, 396, 362, 328, 294, 260, 226, 192, 158, 124, 90, 56, 22, 1, 35, 69, 103, 137, 171, 205, 239, 273, 307, 341, 375, 409, 443, 477, 511, 490, 456, 422, 388, 354, 320, 286, 252, 218, 184, 150, 116, 82, 48, 14, 27, 61, 95, 129, 163, 197, 231, 265, 299, 333, 367, 401, 435, 469, 503, 482, 448, 414, 380, 346, 312, 278, 244, 210, 176, 142, 108, 74, 40, 6, 19, 53, 87, 121, 155, 189, 223, 257, 291, 325, 359, 393, 427, 461, 495, 508, 474, 440, 406, 372, 338, 304, 270, 236, 202, 168, 134, 100, 66, 32, 11, 45, 79, 113, 147, 181, 215, 249, 283, 317, 351, 385, 419, 453, 487, 500, 466, 432, 398, 364, 330, 296, 262, 228, 194, 160, 126, 92, 58, 24, 3, 37, 71, 105, 139, 173, 207, 241, 275, 309, 343, 377, 411, 445, 479, 492, 458, 424, 390, 356, 322, 288, 254, 220, 186, 152, 118, 84, 50, 16, 29, 63, 97, 131, 165, 199, 233, 267, 301, 335, 369, 403, 437, 471, 505, 484, 450, 416, 382, 348, 314, 280, 246, 212, 178, 144, 110, 76, 42, 8, 21, 55, 89, 123, 157, 191, 225, 259, 293, 327, 361, 395, 429, 463, 497 };
  const uint16_t fibonacciToPhysical[NUM_PIXELS] { 15, 316, 135, 437, 255, 46, 376, 166, 496, 286, 105, 407, 225, 16, 346, 136, 466, 256, 75, 377, 195, 497, 315, 106, 436, 226, 45, 347, 165, 467, 285, 76, 406, 196, 14, 317, 134, 438, 254, 47, 375, 167, 495, 287, 104, 408, 224, 17, 345, 137, 465, 257, 74, 378, 194, 498, 314, 107, 435, 227, 44, 348, 164, 468, 284, 77, 405, 197, 13, 318, 133, 439, 253, 48, 374, 168, 494, 288, 103, 409, 223, 18, 344, 138, 464, 258, 73, 379, 193, 499, 313, 108, 434, 228, 43, 349, 163, 469, 283, 78, 404, 198, 12, 319, 132, 440, 252, 49, 373, 169, 493, 289, 102, 410, 222, 19, 343, 139, 463, 259, 72, 380, 192, 500, 312, 109, 433, 229, 42, 350, 162, 470, 282, 79, 403, 199, 11, 320, 131, 441, 251, 50, 372, 170, 492, 290, 101, 411, 221, 20, 342, 140, 462, 260, 71, 381, 191, 501, 311, 110, 432, 230, 41, 351, 161, 471, 281, 80, 402, 200, 10, 321, 130, 442, 250, 51, 371, 171, 491, 291, 100, 412, 220, 21, 341, 141, 461, 261, 70, 382, 190, 502, 310, 111, 431, 231, 40, 352, 160, 472, 280, 81, 401, 201, 9, 322, 129, 443, 249, 52, 370, 172, 490, 292, 99, 413, 219, 22, 340, 142, 460, 262, 69, 383, 189, 503, 309, 112, 430, 232, 39, 353, 159, 473, 279, 82, 400, 202, 8, 323, 128, 444, 248, 53, 369, 173, 489, 293, 98, 414, 218, 23, 339, 143, 459, 263, 68, 384, 188, 504, 308, 113, 429, 233, 38, 354, 158, 474, 278, 83, 399, 203, 7, 324, 127, 445, 247, 54, 368, 174, 488, 294, 97, 415, 217, 24, 338, 144, 458, 264, 67, 385, 187, 505, 307, 114, 428, 234, 37, 355, 157, 475, 277, 84, 398, 204, 6, 325, 126, 446, 246, 55, 367, 175, 487, 295, 96, 416, 216, 25, 337, 145, 457, 265, 66, 386, 186, 506, 306, 115, 427, 235, 36, 356, 156, 476, 276, 85, 397, 205, 5, 326, 125, 447, 245, 56, 366, 176, 486, 296, 95, 417, 215, 26, 336, 146, 456, 266, 65, 387, 185, 507, 305, 116, 426, 236, 35, 357, 155, 477, 275, 86, 396, 206, 4, 327, 124, 448, 244, 57, 365, 177, 485, 297, 94, 418, 214, 27, 335, 147, 455, 267, 64, 388, 184, 508, 304, 117, 425, 237, 34, 358, 154, 478, 274, 87, 395, 207, 3, 328, 123, 449, 243, 58, 364, 178, 484, 298, 93, 419, 213, 28, 334, 148, 454, 268, 63, 389, 183, 509, 303, 118, 424, 238, 33, 359, 153, 479, 273, 88, 394, 208, 2, 329, 122, 450, 242, 59, 363, 179, 483, 299, 92, 420, 212, 29, 333, 149, 453, 269, 62, 390, 182, 510, 302, 119, 423, 239, 32, 360, 152, 480, 272, 89, 393, 209, 1, 330, 121, 451, 241, 60, 362, 180, 482, 300, 91, 421, 211, 30, 332, 150, 452, 270, 61, 391, 181, 511, 301, 120, 422, 240, 31, 361, 151, 481, 271, 90, 392, 210, 0, 331 };
  const uint8_t  coordsX[NUM_PIXELS]             { 170, 178, 185, 191, 196, 199, 202, 202, 202, 200, 196, 191, 184, 175, 161, 132, 148, 166, 176, 183, 188, 190, 192, 191, 190, 186, 182, 176, 170, 162, 153, 125, 136, 145, 154, 161, 168, 173, 177, 180, 181, 181, 178, 174, 167, 155, 139, 157, 164, 169, 170, 170, 168, 165, 160, 154, 147, 139, 129, 119, 109, 82, 93, 104, 114, 124, 132, 140, 147, 152, 157, 159, 160, 159, 155, 145, 145, 150, 150, 149, 146, 141, 135, 127, 119, 110, 100, 90, 79, 68, 57, 45, 56, 66, 77, 87, 97, 107, 115, 123, 130, 135, 139, 142, 141, 136, 134, 134, 131, 126, 120, 113, 105, 96, 86, 76, 66, 56, 45, 35, 25, 18, 27, 37, 47, 57, 67, 77, 86, 95, 104, 112, 119, 124, 128, 129, 125, 120, 113, 105, 97, 88, 78, 69, 59, 50, 40, 31, 22, 14, 6, 0, 6, 12, 19, 27, 35, 44, 54, 63, 73, 82, 91, 101, 109, 118, 121, 108, 98, 88, 78, 69, 59, 50, 41, 33, 25, 18, 12, 7, 3, 6, 8, 11, 15, 20, 26, 33, 40, 48, 57, 67, 77, 87, 98, 111, 102, 89, 77, 67, 58, 49, 41, 34, 28, 23, 19, 16, 15, 14, 15, 26, 24, 23, 24, 26, 28, 33, 38, 44, 51, 60, 69, 80, 93, 111, 100, 85, 73, 64, 55, 49, 43, 39, 36, 34, 33, 34, 36, 39, 43, 58, 53, 49, 45, 44, 43, 44, 46, 50, 55, 61, 69, 79, 93, 116, 104, 87, 76, 68, 62, 58, 55, 54, 54, 55, 58, 62, 68, 74, 82, 108, 99, 90, 83, 77, 72, 68, 65, 64, 65, 67, 70, 76, 85, 97, 112, 94, 85, 80, 76, 75, 75, 77, 81, 85, 91, 98, 106, 115, 125, 153, 142, 131, 122, 113, 105, 99, 93, 89, 87, 85, 86, 89, 95, 106, 123, 105, 99, 96, 96, 98, 101, 106, 112, 119, 128, 137, 147, 157, 168, 180, 193, 182, 171, 161, 151, 141, 133, 125, 118, 113, 108, 106, 106, 108, 115, 116, 114, 115, 118, 123, 129, 137, 145, 154, 164, 174, 184, 195, 206, 216, 226, 216, 205, 195, 185, 175, 165, 156, 147, 139, 133, 127, 123, 121, 124, 127, 129, 134, 141, 148, 156, 165, 174, 184, 194, 204, 214, 224, 233, 242, 253, 246, 238, 229, 221, 211, 202, 192, 182, 173, 164, 155, 147, 140, 133, 134, 142, 151, 160, 169, 179, 188, 198, 207, 216, 225, 233, 241, 247, 253, 255, 251, 247, 241, 234, 227, 219, 210, 201, 192, 182, 173, 163, 153, 142, 134, 151, 163, 174, 184, 194, 203, 212, 220, 227, 233, 239, 243, 247, 249, 242, 242, 241, 238, 235, 230, 225, 218, 211, 203, 194, 184, 173, 161, 146, 155, 170, 182, 192, 201, 208, 215, 221, 226, 229, 231, 232, 232, 231, 228, 215, 219, 221, 223, 223, 221, 219, 215, 210, 204, 197, 188, 177, 164, 144, 154, 170, 182, 191, 198, 204, 208, 211, 212, 213, 212, 209, 205, 200, 194 };
  const uint8_t  coordsY[NUM_PIXELS]             { 6, 14, 22, 31, 41, 50, 60, 70, 80, 89, 98, 106, 114, 120, 125, 128, 124, 116, 109, 101, 92, 82, 73, 63, 54, 44, 35, 27, 18, 11, 4, 0, 5, 10, 17, 24, 32, 40, 49, 59, 68, 78, 87, 97, 106, 116, 121, 106, 95, 85, 75, 65, 56, 47, 38, 31, 24, 17, 12, 7, 4, 10, 10, 13, 16, 20, 25, 31, 39, 46, 55, 64, 74, 85, 96, 111, 101, 87, 76, 65, 56, 48, 41, 34, 29, 25, 21, 20, 19, 19, 21, 33, 30, 29, 28, 29, 31, 34, 39, 45, 51, 59, 69, 79, 92, 111, 101, 85, 73, 64, 56, 50, 45, 41, 39, 38, 38, 40, 43, 47, 52, 68, 62, 56, 53, 50, 49, 49, 50, 53, 57, 63, 70, 80, 94, 119, 106, 89, 78, 70, 65, 61, 59, 59, 60, 62, 66, 71, 77, 84, 92, 119, 109, 100, 92, 85, 80, 75, 72, 70, 70, 71, 74, 79, 87, 99, 114, 97, 88, 83, 81, 80, 81, 84, 88, 94, 100, 108, 116, 126, 136, 163, 152, 142, 132, 123, 114, 107, 101, 96, 93, 91, 91, 93, 98, 108, 108, 102, 101, 101, 104, 108, 114, 120, 128, 137, 146, 157, 167, 178, 190, 203, 192, 181, 170, 160, 150, 141, 133, 126, 119, 115, 111, 110, 111, 118, 119, 118, 120, 124, 130, 136, 144, 153, 162, 172, 182, 193, 203, 214, 224, 232, 223, 213, 202, 192, 182, 172, 163, 154, 146, 139, 132, 128, 125, 126, 129, 133, 139, 146, 154, 162, 172, 181, 191, 201, 210, 220, 229, 238, 246, 255, 249, 242, 234, 225, 216, 207, 197, 188, 178, 169, 160, 151, 143, 136, 135, 145, 155, 164, 174, 183, 193, 202, 211, 220, 228, 236, 243, 249, 254, 253, 250, 246, 242, 236, 229, 222, 213, 205, 196, 186, 176, 166, 155, 143, 133, 153, 166, 177, 187, 196, 205, 214, 221, 228, 234, 238, 242, 245, 246, 246, 236, 237, 237, 236, 233, 229, 225, 219, 212, 204, 195, 186, 175, 162, 146, 156, 171, 182, 192, 201, 208, 214, 220, 223, 226, 228, 228, 227, 224, 221, 207, 211, 215, 217, 218, 218, 216, 213, 209, 203, 196, 187, 177, 164, 142, 153, 170, 181, 190, 196, 201, 205, 207, 208, 207, 205, 202, 197, 191, 184, 159, 168, 176, 182, 188, 192, 195, 197, 197, 196, 193, 189, 182, 173, 160, 146, 164, 173, 180, 184, 186, 186, 185, 183, 179, 174, 167, 160, 151, 142, 114, 125, 135, 144, 152, 159, 165, 170, 173, 175, 176, 174, 171, 164, 153, 136, 154, 161, 164, 165, 164, 162, 157, 152, 145, 138, 129, 119, 109, 98, 72, 83, 94, 105, 114, 124, 132, 139, 145, 150, 153, 155, 155, 152, 143, 142, 146, 146, 143, 139, 134, 127, 119, 110, 101, 91, 81, 70, 59, 48, 37, 48, 58, 69, 79, 89, 99, 108, 116, 123, 129, 134, 137, 138, 134, 132, 130, 126, 121, 114, 106, 98, 88, 79, 69, 59, 48, 38, 29, 19 };
  const uint8_t  angles[NUM_PIXELS]              { 205, 208, 211, 215, 218, 221, 225, 228, 231, 235, 238, 242, 245, 248, 252, 255, 246, 243, 239, 236, 233, 229, 226, 223, 219, 216, 213, 209, 206, 203, 199, 190, 194, 197, 200, 204, 207, 211, 214, 217, 221, 224, 227, 231, 234, 237, 232, 229, 225, 222, 219, 215, 212, 208, 205, 202, 198, 195, 192, 188, 185, 176, 180, 183, 186, 190, 193, 196, 200, 203, 206, 210, 213, 216, 220, 223, 214, 211, 208, 204, 201, 198, 194, 191, 188, 184, 181, 177, 174, 171, 167, 162, 165, 169, 172, 175, 179, 182, 185, 189, 192, 196, 199, 202, 206, 209, 200, 197, 193, 190, 187, 183, 180, 177, 173, 170, 167, 163, 160, 157, 153, 148, 151, 154, 158, 161, 165, 168, 171, 175, 178, 181, 185, 188, 191, 195, 186, 183, 179, 176, 173, 169, 166, 162, 159, 156, 152, 149, 146, 142, 139, 130, 133, 137, 140, 144, 147, 150, 154, 157, 160, 164, 167, 170, 174, 177, 172, 168, 165, 162, 158, 155, 152, 148, 145, 141, 138, 135, 131, 128, 125, 116, 119, 123, 126, 129, 133, 136, 139, 143, 146, 149, 153, 156, 160, 163, 154, 151, 147, 144, 141, 137, 134, 131, 127, 124, 121, 117, 114, 110, 107, 102, 105, 108, 112, 115, 118, 122, 125, 129, 132, 135, 139, 142, 145, 149, 140, 137, 133, 130, 126, 123, 120, 116, 113, 110, 106, 103, 100, 96, 93, 87, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 126, 122, 119, 116, 112, 109, 106, 102, 99, 95, 92, 89, 85, 82, 79, 70, 73, 77, 80, 83, 87, 90, 93, 97, 100, 103, 107, 110, 114, 117, 111, 108, 105, 101, 98, 95, 91, 88, 85, 81, 78, 74, 71, 68, 64, 56, 59, 62, 66, 69, 72, 76, 79, 82, 86, 89, 93, 96, 99, 103, 97, 94, 90, 87, 84, 80, 77, 74, 70, 67, 64, 60, 57, 54, 50, 47, 41, 45, 48, 51, 55, 58, 62, 65, 68, 72, 75, 78, 82, 85, 88, 80, 76, 73, 70, 66, 63, 59, 56, 53, 49, 46, 43, 39, 36, 33, 27, 31, 34, 37, 41, 44, 47, 51, 54, 57, 61, 64, 67, 71, 74, 65, 62, 59, 55, 52, 49, 45, 42, 39, 35, 32, 28, 25, 22, 18, 10, 13, 16, 20, 23, 26, 30, 33, 36, 40, 43, 47, 50, 53, 57, 51, 48, 44, 41, 38, 34, 31, 28, 24, 21, 18, 14, 11, 8, 4, 251, 254, 2, 5, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 37, 34, 30, 27, 24, 20, 17, 13, 10, 7, 3, 0, 252, 249, 245, 236, 240, 243, 247, 250, 253, 1, 5, 8, 11, 15, 18, 21, 25, 28, 19, 16, 13, 9, 6, 3, 255, 251, 248, 244, 241, 238, 234, 231, 228, 222, 226, 229, 232, 236, 239, 242, 246, 249, 252, 0, 4, 7, 11, 14, 5, 2, 254, 250, 247, 244, 240, 237, 234, 230, 227, 223, 220, 217, 213 };
  const uint8_t  radius[NUM_PIXELS]              { 255, 238, 221, 204, 187, 170, 153, 136, 119, 102, 85, 68, 51, 34, 17, 0, 6, 23, 40, 57, 74, 91, 108, 125, 142, 159, 176, 193, 210, 227, 244, 251, 234, 217, 200, 183, 166, 149, 132, 115, 98, 81, 64, 47, 30, 13, 2, 19, 36, 53, 70, 87, 104, 121, 138, 155, 172, 189, 206, 223, 240, 247, 230, 213, 196, 179, 162, 145, 128, 111, 94, 77, 60, 43, 26, 9, 15, 32, 49, 66, 83, 100, 117, 134, 151, 168, 185, 202, 219, 236, 253, 243, 226, 209, 192, 175, 158, 141, 124, 107, 90, 73, 56, 39, 22, 5, 11, 28, 45, 62, 79, 96, 113, 130, 147, 164, 181, 198, 215, 232, 249, 239, 222, 205, 188, 171, 154, 137, 120, 103, 86, 69, 52, 35, 18, 1, 7, 24, 41, 58, 75, 92, 109, 126, 143, 160, 177, 194, 211, 228, 245, 252, 235, 218, 201, 184, 167, 150, 133, 116, 99, 82, 65, 48, 31, 14, 3, 20, 37, 54, 71, 88, 105, 122, 139, 156, 173, 190, 207, 224, 241, 248, 231, 214, 197, 180, 163, 146, 129, 112, 95, 78, 61, 44, 27, 10, 16, 33, 50, 67, 84, 101, 118, 135, 152, 169, 186, 203, 220, 237, 254, 244, 227, 210, 193, 176, 159, 142, 125, 108, 91, 74, 57, 40, 23, 6, 12, 29, 46, 63, 80, 97, 114, 131, 148, 165, 182, 199, 216, 233, 250, 240, 223, 206, 189, 172, 155, 138, 121, 104, 87, 70, 53, 36, 19, 2, 8, 25, 42, 59, 76, 93, 110, 127, 144, 161, 178, 195, 212, 229, 246, 253, 236, 219, 202, 185, 168, 151, 134, 117, 100, 83, 66, 49, 32, 15, 4, 21, 38, 55, 72, 89, 106, 123, 140, 157, 174, 191, 208, 225, 242, 249, 232, 215, 198, 181, 164, 147, 130, 113, 96, 79, 62, 45, 28, 11, 0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 245, 228, 211, 194, 177, 160, 143, 126, 109, 92, 75, 58, 41, 24, 7, 13, 30, 47, 64, 81, 98, 115, 132, 149, 166, 183, 200, 217, 234, 251, 241, 224, 207, 190, 173, 156, 139, 122, 105, 88, 71, 54, 37, 20, 3, 9, 26, 43, 60, 77, 94, 111, 128, 145, 162, 179, 196, 213, 230, 247, 254, 237, 220, 203, 186, 169, 152, 135, 118, 101, 84, 67, 50, 33, 16, 5, 22, 39, 56, 73, 90, 107, 124, 141, 158, 175, 192, 209, 226, 243, 250, 233, 216, 199, 182, 165, 148, 131, 114, 97, 80, 63, 46, 29, 12, 1, 18, 35, 52, 69, 86, 103, 120, 137, 154, 171, 188, 205, 222, 239, 246, 229, 212, 195, 178, 161, 144, 127, 110, 93, 76, 59, 42, 25, 8, 14, 31, 48, 65, 82, 99, 116, 133, 150, 167, 184, 201, 218, 235, 252, 242, 225, 208, 191, 174, 157, 140, 123, 106, 89, 72, 55, 38, 21, 4, 10, 27, 44, 61, 78, 95, 112, 129, 146, 163, 180, 197, 214, 231, 248 };
  const uint8_t (&radiusProxy)[NUM_PIXELS] = radius;
#elif defined(PRODUCT_FIBONACCI256)
  const uint8_t  physicalToFibonacci[NUM_PIXELS] { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 252, 239, 226, 213, 200, 187, 174, 161, 148, 135, 122, 109, 96, 83, 70, 57, 44, 31, 18, 5, 10, 23, 36, 49, 62, 75, 88, 101, 114, 127, 140, 153, 166, 179, 192, 205, 218, 231, 244, 249, 236, 223, 210, 197, 184, 171, 158, 145, 132, 119, 106, 93, 80, 67, 54, 41, 28, 15, 2, 7, 20, 33, 46, 59, 72, 85, 98, 111, 124, 137, 150, 163, 176, 189, 202, 215, 228, 241, 254, 246, 233, 220, 207, 194, 181, 168, 155, 142, 129, 116, 103, 90, 77, 64, 51, 38, 25, 12, 4, 17, 30, 43, 56, 69, 82, 95, 108, 121, 134, 147, 160, 173, 186, 199, 212, 225, 238, 251, 243, 230, 217, 204, 191, 178, 165, 152, 139, 126, 113, 100, 87, 74, 61, 48, 35, 22, 9, 1, 14, 27, 40, 53, 66, 79, 92, 105, 118, 131, 144, 157, 170, 183, 196, 209, 222, 235, 248, 253, 240, 227, 214, 201, 188, 175, 162, 149, 136, 123, 110, 97, 84, 71, 58, 45, 32, 19, 6, 11, 24, 37, 50, 63, 76, 89, 102, 115, 128, 141, 154, 167, 180, 193, 206, 219, 232, 245, 250, 237, 224, 211, 198, 185, 172, 159, 146, 133, 120, 107, 94, 81, 68, 55, 42, 29, 16, 3, 8, 21, 34, 47, 60, 73, 86, 99, 112, 125, 138, 151, 164, 177, 190, 203, 216, 229, 242, 255 };
  const uint8_t  fibonacciToPhysical[NUM_PIXELS] { 0, 157, 78, 235, 118, 39, 196, 79, 236, 156, 40, 197, 117, 1, 158, 77, 234, 119, 38, 195, 80, 237, 155, 41, 198, 116, 2, 159, 76, 233, 120, 37, 194, 81, 238, 154, 42, 199, 115, 3, 160, 75, 232, 121, 36, 193, 82, 239, 153, 43, 200, 114, 4, 161, 74, 231, 122, 35, 192, 83, 240, 152, 44, 201, 113, 5, 162, 73, 230, 123, 34, 191, 84, 241, 151, 45, 202, 112, 6, 163, 72, 229, 124, 33, 190, 85, 242, 150, 46, 203, 111, 7, 164, 71, 228, 125, 32, 189, 86, 243, 149, 47, 204, 110, 8, 165, 70, 227, 126, 31, 188, 87, 244, 148, 48, 205, 109, 9, 166, 69, 226, 127, 30, 187, 88, 245, 147, 49, 206, 108, 10, 167, 68, 225, 128, 29, 186, 89, 246, 146, 50, 207, 107, 11, 168, 67, 224, 129, 28, 185, 90, 247, 145, 51, 208, 106, 12, 169, 66, 223, 130, 27, 184, 91, 248, 144, 52, 209, 105, 13, 170, 65, 222, 131, 26, 183, 92, 249, 143, 53, 210, 104, 14, 171, 64, 221, 132, 25, 182, 93, 250, 142, 54, 211, 103, 15, 172, 63, 220, 133, 24, 181, 94, 251, 141, 55, 212, 102, 16, 173, 62, 219, 134, 23, 180, 95, 252, 140, 56, 213, 101, 17, 174, 61, 218, 135, 22, 179, 96, 253, 139, 57, 214, 100, 18, 175, 60, 217, 136, 21, 178, 97, 254, 138, 58, 215, 99, 19, 176, 59, 216, 137, 20, 177, 98, 255 };
  const uint8_t  coordsX[NUM_PIXELS]             { 133, 156, 165, 168, 165, 158, 147, 132, 114, 95, 76, 57, 41, 28, 19, 15, 17, 24, 37, 56, 123, 96, 73, 53, 38, 28, 24, 25, 31, 41, 55, 71, 89, 106, 122, 136, 146, 152, 152, 143, 138, 136, 128, 115, 101, 85, 70, 56, 44, 37, 33, 34, 41, 53, 69, 90, 114, 140, 167, 226, 204, 180, 154, 129, 106, 85, 67, 54, 46, 43, 44, 50, 60, 72, 86, 100, 113, 123, 128, 117, 104, 90, 78, 67, 59, 54, 54, 59, 68, 82, 100, 121, 143, 167, 191, 212, 231, 246, 255, 251, 251, 245, 233, 218, 199, 178, 156, 134, 114, 96, 82, 73, 67, 66, 70, 78, 89, 103, 111, 94, 84, 80, 81, 86, 96, 109, 126, 145, 165, 185, 204, 220, 233, 241, 244, 241, 232, 217, 179, 201, 217, 229, 235, 235, 230, 220, 207, 190, 172, 154, 136, 121, 108, 99, 95, 96, 104, 120, 110, 111, 118, 130, 144, 160, 176, 192, 206, 217, 224, 227, 224, 216, 202, 184, 162, 137, 110, 44, 68, 94, 120, 145, 168, 187, 202, 212, 216, 216, 212, 203, 191, 177, 162, 148, 135, 126, 122, 136, 147, 161, 174, 186, 197, 204, 206, 205, 198, 187, 172, 152, 130, 106, 81, 58, 36, 17, 0, 5, 15, 30, 49, 71, 93, 116, 138, 157, 173, 185, 192, 195, 193, 187, 178, 166, 152, 137, 149, 164, 175, 180, 182, 179, 171, 159, 143, 125, 105, 83, 63, 44, 28, 16, 9, 7, 12, 23 };
  const uint8_t  coordsY[NUM_PIXELS]             { 126, 120, 109, 96, 82, 69, 57, 49, 45, 45, 50, 59, 74, 92, 114, 138, 163, 188, 211, 231, 255, 248, 235, 218, 198, 175, 152, 129, 107, 89, 74, 63, 57, 56, 59, 66, 76, 88, 102, 116, 103, 88, 77, 71, 68, 70, 77, 88, 103, 121, 141, 163, 184, 205, 222, 236, 245, 249, 247, 208, 224, 235, 241, 240, 234, 223, 209, 191, 172, 152, 132, 115, 101, 90, 84, 82, 86, 95, 114, 107, 98, 98, 103, 112, 126, 142, 159, 177, 195, 210, 222, 230, 233, 230, 223, 209, 191, 168, 142, 98, 125, 151, 174, 194, 209, 219, 223, 223, 218, 208, 195, 180, 164, 148, 134, 122, 114, 112, 123, 128, 138, 151, 165, 180, 193, 203, 211, 214, 212, 206, 194, 178, 158, 134, 109, 83, 58, 35, 11, 28, 48, 71, 95, 120, 142, 163, 179, 192, 200, 203, 202, 196, 187, 175, 162, 148, 136, 133, 152, 166, 177, 186, 190, 191, 187, 178, 165, 148, 128, 107, 84, 62, 41, 24, 11, 2, 0, 28, 16, 9, 8, 13, 23, 37, 55, 75, 96, 116, 135, 151, 164, 173, 177, 177, 172, 162, 146, 153, 161, 163, 160, 152, 139, 124, 106, 87, 69, 51, 36, 25, 18, 16, 20, 29, 44, 64, 133, 106, 81, 60, 44, 32, 26, 25, 29, 38, 50, 65, 82, 99, 115, 129, 140, 147, 148, 138, 134, 131, 122, 110, 95, 80, 65, 52, 42, 36, 34, 37, 45, 59, 77, 98, 123, 149, 176, 202 };
  const uint8_t  angles[NUM_PIXELS]              { 0, 247, 238, 229, 220, 211, 203, 194, 185, 176, 167, 159, 150, 141, 132, 123, 115, 106, 97, 88, 65, 74, 83, 92, 100, 109, 118, 127, 136, 144, 153, 162, 171, 180, 188, 197, 206, 215, 224, 232, 209, 201, 192, 183, 174, 165, 157, 148, 139, 130, 121, 113, 104, 95, 86, 77, 69, 60, 51, 28, 37, 46, 54, 63, 72, 81, 90, 98, 107, 116, 125, 134, 142, 151, 160, 169, 178, 186, 195, 172, 163, 155, 146, 137, 128, 119, 111, 102, 93, 84, 75, 67, 58, 49, 40, 31, 23, 14, 5, 246, 255, 8, 17, 26, 35, 44, 52, 61, 70, 79, 88, 96, 105, 114, 123, 132, 140, 149, 135, 126, 117, 108, 100, 91, 82, 73, 64, 56, 47, 38, 29, 20, 12, 3, 250, 241, 232, 223, 209, 218, 227, 235, 244, 253, 6, 15, 24, 33, 41, 50, 59, 68, 77, 85, 94, 103, 112, 98, 89, 80, 71, 62, 54, 45, 36, 27, 18, 10, 1, 247, 239, 230, 221, 212, 203, 195, 186, 163, 172, 180, 189, 198, 207, 216, 224, 233, 242, 251, 4, 13, 22, 31, 39, 48, 57, 66, 75, 52, 43, 34, 25, 16, 8, 254, 245, 237, 228, 219, 210, 201, 193, 184, 175, 166, 157, 149, 126, 134, 143, 152, 161, 170, 178, 187, 196, 205, 214, 222, 231, 240, 249, 2, 11, 20, 28, 37, 14, 5, 252, 243, 235, 226, 217, 208, 199, 191, 182, 173, 164, 155, 147, 138, 129, 120, 111, 103 };
  const uint8_t (&radiusProxy)[NUM_PIXELS] = physicalToFibonacci;
#elif defined(PRODUCT_FIBONACCI128)
  const uint8_t  physicalToFibonacci[NUM_PIXELS] { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 122, 109, 96, 83, 70, 57, 44, 31, 18, 5, 10, 23, 36, 49, 62, 75, 88, 101, 114, 127, 119, 106, 93, 80, 67, 54, 41, 28, 15, 2, 7, 20, 33, 46, 59, 72, 85, 98, 111, 124, 116, 103, 90, 77, 64, 51, 38, 25, 12, 4, 17, 30, 43, 56, 69, 82, 95, 108, 121, 126, 113, 100, 87, 74, 61, 48, 35, 22, 9, 1, 14, 27, 40, 53, 66, 79, 92, 105, 118, 123, 110, 97, 84, 71, 58, 45, 32, 19, 6, 11, 24, 37, 50, 63, 76, 89, 102, 115, 120, 107, 94, 81, 68, 55, 42, 29, 16, 3, 8, 21, 34, 47, 60, 73, 86, 99, 112, 125 };
  const uint8_t  fibonacciToPhysical[NUM_PIXELS] { 0, 79, 39, 117, 59, 19, 98, 40, 118, 78, 20, 99, 58, 1, 80, 38, 116, 60, 18, 97, 41, 119, 77, 21, 100, 57, 2, 81, 37, 115, 61, 17, 96, 42, 120, 76, 22, 101, 56, 3, 82, 36, 114, 62, 16, 95, 43, 121, 75, 23, 102, 55, 4, 83, 35, 113, 63, 15, 94, 44, 122, 74, 24, 103, 54, 5, 84, 34, 112, 64, 14, 93, 45, 123, 73, 25, 104, 53, 6, 85, 33, 111, 65, 13, 92, 46, 124, 72, 26, 105, 52, 7, 86, 32, 110, 66, 12, 91, 47, 125, 71, 27, 106, 51, 8, 87, 31, 109, 67, 11, 90, 48, 126, 70, 28, 107, 50, 9, 88, 30, 108, 68, 10, 89, 49, 127, 69, 29 };
  const uint8_t  coordsX[NUM_PIXELS]             { 137, 170, 182, 186, 182, 172, 156, 135, 110, 83, 26, 49, 74, 99, 121, 141, 155, 164, 164, 151, 145, 141, 129, 112, 91, 69, 47, 27, 11, 0, 9, 11, 19, 33, 50, 70, 90, 108, 123, 130, 114, 96, 77, 58, 43, 32, 25, 25, 32, 45, 85, 65, 51, 43, 42, 47, 58, 74, 94, 105, 81, 68, 62, 63, 70, 84, 103, 127, 154, 218, 193, 167, 142, 119, 101, 89, 83, 84, 96, 118, 104, 106, 116, 132, 152, 175, 198, 221, 241, 255, 248, 236, 219, 199, 178, 158, 140, 126, 121, 140, 157, 176, 195, 213, 227, 237, 241, 239, 193, 210, 221, 225, 222, 214, 201, 184, 164, 142, 160, 181, 196, 204, 206, 202, 191, 174, 152, 125 };
  const uint8_t  coordsY[NUM_PIXELS]             { 130, 121, 105, 86, 66, 47, 31, 19, 13, 13, 55, 39, 30, 28, 33, 43, 57, 75, 95, 115, 96, 75, 60, 50, 46, 49, 59, 74, 96, 122, 166, 139, 114, 93, 78, 69, 67, 72, 85, 112, 102, 90, 89, 96, 110, 129, 152, 177, 203, 227, 247, 228, 207, 184, 161, 140, 123, 112, 109, 126, 132, 146, 165, 185, 206, 225, 240, 251, 255, 224, 235, 240, 237, 229, 216, 199, 181, 161, 143, 139, 166, 186, 202, 215, 221, 222, 216, 204, 185, 115, 142, 166, 184, 197, 203, 202, 195, 181, 158, 167, 180, 182, 178, 166, 148, 126, 101, 74, 21, 42, 66, 91, 114, 134, 150, 159, 160, 147, 141, 137, 124, 106, 85, 63, 42, 24, 9, 0 };
  const uint8_t  angles[NUM_PIXELS]              { 0, 247, 239, 230, 221, 212, 203, 194, 186, 177, 154, 163, 171, 180, 189, 198, 207, 216, 224, 233, 210, 201, 192, 184, 175, 166, 157, 148, 139, 131, 116, 125, 134, 143, 152, 160, 169, 178, 187, 196, 173, 164, 155, 146, 137, 129, 120, 111, 102, 93, 79, 88, 97, 105, 114, 123, 132, 141, 150, 135, 126, 118, 109, 100, 91, 82, 73, 65, 56, 33, 42, 50, 59, 68, 77, 86, 95, 103, 112, 98, 89, 80, 71, 63, 54, 45, 36, 27, 18, 252, 4, 13, 22, 31, 39, 48, 57, 66, 75, 52, 43, 34, 25, 16, 8, 255, 246, 237, 214, 223, 232, 241, 250, 2, 11, 20, 29, 37, 14, 5, 253, 244, 235, 226, 218, 209, 200, 191 };
  const uint8_t  radius[NUM_PIXELS]              { 0, 26, 52, 78, 104, 131, 157, 183, 209, 235, 245, 219, 193, 167, 141, 114, 88, 62, 36, 10, 20, 46, 72, 98, 124, 151, 177, 203, 229, 255, 239, 213, 187, 161, 135, 108, 82, 56, 30, 4, 14, 40, 66, 92, 118, 145, 171, 197, 223, 249, 233, 207, 181, 155, 129, 102, 76, 50, 24, 8, 34, 60, 86, 112, 139, 165, 191, 217, 243, 253, 227, 201, 175, 149, 122, 96, 70, 44, 18, 2, 28, 54, 80, 106, 133, 159, 185, 211, 237, 247, 221, 195, 169, 143, 116, 90, 64, 38, 12, 22, 48, 74, 100, 126, 153, 179, 205, 231, 241, 215, 189, 163, 137, 110, 84, 58, 32, 6, 16, 42, 68, 94, 120, 147, 173, 199, 225, 251 };
  const uint8_t (&radiusProxy)[NUM_PIXELS] = radius;
#elif defined(PRODUCT_FIBONACCI64_FULL) || defined(PRODUCT_FIBONACCI64_MINI) || defined(PRODUCT_FIBONACCI64_MICRO) || defined(PRODUCT_FIBONACCI64_NANO)
  const uint8_t  physicalToFibonacci[NUM_PIXELS] { 0, 13, 26, 39, 52, 57, 44, 31, 18, 5, 10, 23, 36, 49, 62, 54, 41, 28, 15, 2, 7, 20, 33, 46, 59, 51, 38, 25, 12, 4, 17, 30, 43, 56, 61, 48, 35, 22, 9, 1, 14, 27, 40, 53, 58, 45, 32, 19, 6, 11, 24, 37, 50, 63, 55, 42, 29, 16, 3, 8, 21, 34, 47, 60 };
  const uint8_t  fibonacciToPhysical[NUM_PIXELS] { 0, 39, 19, 58, 29, 9, 48, 20, 59, 38, 10, 49, 28, 1, 40, 18, 57, 30, 8, 47, 21, 60, 37, 11, 50, 27, 2, 41, 17, 56, 31, 7, 46, 22, 61, 36, 12, 51, 26, 3, 42, 16, 55, 32, 6, 45, 23, 62, 35, 13, 52, 25, 4, 43, 15, 54, 33, 5, 44, 24, 63, 34, 14, 53 };
  const uint8_t  coordsX[NUM_PIXELS]             { 140, 189, 208, 214, 208, 146, 168, 180, 180, 162, 152, 146, 129, 103, 72, 40, 70, 97, 120, 131, 107, 79, 50, 23, 0, 7, 23, 46, 76, 93, 57, 37, 28, 29, 87, 68, 59, 62, 80, 113, 91, 94, 109, 133, 202, 172, 145, 125, 117, 145, 170, 198, 227, 253, 255, 235, 210, 181, 148, 175, 207, 228, 240, 244 };
  const uint8_t  coordsY[NUM_PIXELS]             { 128, 114, 91, 63, 34, 0, 21, 48, 76, 106, 78, 47, 25, 11, 5, 38, 35, 42, 61, 101, 87, 69, 68, 78, 98, 143, 118, 102, 98, 122, 131, 152, 179, 209, 255, 230, 202, 174, 148, 142, 181, 210, 235, 252, 235, 234, 224, 203, 170, 183, 201, 205, 198, 181, 134, 157, 171, 173, 153, 145, 138, 120, 93, 63 };
  const uint8_t  angles[NUM_PIXELS]              { 0, 249, 241, 232, 223, 200, 208, 217, 226, 235, 212, 203, 194, 185, 176, 162, 171, 180, 188, 197, 174, 165, 156, 147, 139, 124, 133, 142, 151, 136, 128, 119, 110, 101, 78, 86, 95, 104, 113, 99, 90, 81, 72, 63, 40, 49, 58, 67, 75, 52, 43, 34, 25, 17, 2, 11, 20, 29, 38, 14, 6, 255, 246, 237 };
  const uint8_t  radius[NUM_PIXELS]              { 0, 53, 105, 158, 210, 231, 178, 125, 73, 20, 40, 93, 146, 198, 251, 219, 166, 113, 61, 8, 28, 81, 134, 186, 239, 206, 154, 101, 49, 16, 69, 121, 174, 227, 247, 194, 142, 89, 36, 4, 57, 109, 162, 215, 235, 182, 130, 77, 24, 45, 97, 150, 202, 255, 223, 170, 117, 65, 12, 32, 85, 138, 190, 243 };
  const uint8_t (&radiusProxy)[NUM_PIXELS] = radius;
#elif defined(PRODUCT_FIBONACCI32)
  const uint8_t  physicalToFibonacci[NUM_PIXELS] { 0, 13, 26, 31, 18, 5, 10, 23, 28, 15, 2, 7, 20, 33, 25, 12, 4, 17, 30, 22, 9, 1, 14, 27, 32, 19, 6, 11, 24, 29, 16, 3, 8, 21 };
  const uint8_t  fibonacciToPhysical[NUM_PIXELS] { 0, 21, 10, 31, 16, 5, 26, 11, 32, 20, 6, 27, 15, 1, 22, 9, 30, 17, 4, 25, 12, 33, 19, 7, 28, 14, 2, 23, 8, 29, 18, 3, 24, 13 };
  const uint8_t  coordsX[NUM_PIXELS]             { 152, 224, 252, 210, 211, 184, 169, 161, 89, 121, 138, 102, 61, 19, 13, 57, 82, 29, 0, 36, 63, 111, 79, 83, 158, 129, 118, 160, 196, 255, 212, 163, 203, 250 };
  const uint8_t  coordsY[NUM_PIXELS]             { 120, 101, 69, 7, 48, 90, 50, 7, 0, 27, 83, 62, 37, 35, 84, 78, 112, 125, 154, 185, 149, 140, 195, 236, 255, 226, 179, 198, 223, 181, 183, 156, 144, 135 };
  const uint8_t  angles[NUM_PIXELS]              { 255, 246, 237, 214, 223, 232, 208, 199, 176, 185, 193, 170, 161, 152, 138, 147, 132, 123, 114, 100, 108, 94, 85, 76, 53, 62, 70, 47, 38, 15, 23, 32, 9, 0 };
  const uint8_t  radius[NUM_PIXELS]              { 0, 100, 201, 240, 139, 39, 77, 178, 216, 116, 15, 54, 155, 255, 193, 93, 31, 131, 232, 170, 70, 8, 108, 209, 247, 147, 46, 85, 185, 224, 124, 23, 62, 162 };
  const uint8_t (&radiusProxy)[NUM_PIXELS] = radius;
#elif defined(PRODUCT_KRAKEN64)
  const uint8_t  coordsX[NUM_PIXELS]             { 151, 188, 199, 199, 171, 147, 131, 119, 124, 179, 200, 217, 237, 249, 242, 234, 255, 148, 175, 177, 150, 143, 171, 153, 155, 106, 110, 102, 75, 86, 106, 108, 88, 90, 84, 78, 107, 98, 121, 128, 80, 69, 134, 159, 192, 202, 195, 218, 61, 32, 18, 26, 39, 20, 3, 0, 48, 52, 61, 54, 33, 20, 7, 8 };
  const uint8_t  coordsY[NUM_PIXELS]             { 190, 204, 225, 252, 255, 236, 216, 191, 166, 147, 154, 170, 173, 156, 131, 107, 106, 148, 121, 86, 81, 63, 56, 36, 17, 145, 120, 96, 55, 23, 18, 0, 2, 112, 77, 31, 35, 49, 51, 30, 124, 103, 101, 98, 80, 58, 40, 69, 134, 124, 107, 81, 56, 43, 50, 70, 156, 180, 202, 219, 213, 195, 197, 215 };
  const uint8_t  angles[NUM_PIXELS]              { 0, 249, 241, 232, 223, 200, 208, 217, 226, 235, 212, 203, 194, 185, 176, 162, 171, 180, 188, 197, 174, 165, 156, 147, 139, 124, 133, 142, 151, 136, 128, 119, 110, 101, 78, 86, 95, 104, 113, 99, 90, 81, 72, 63, 40, 49, 58, 67, 75, 52, 43, 34, 25, 17, 2, 11, 20, 29, 38, 14, 6, 255, 246, 237 };
  const uint8_t  body[NUM_PIXELS]                { 0, 16, 32, 48, 64, 80, 96, 112, 128, 143, 159, 175, 191, 207, 223, 239, 255, 143, 159, 175, 191, 207, 223, 239, 255, 143, 159, 175, 191, 207, 223, 239, 255, 143, 159, 175, 191, 207, 223, 239, 143, 159, 175, 191, 207, 223, 239, 255, 143, 159, 175, 191, 207, 223, 239, 255, 143, 159, 175, 191, 207, 223, 239, 255 };
  static_assert(NUM_PIXELS == ARRAY_SIZE2(body), "");
  const uint8_t (&radiusProxy)[NUM_PIXELS] = body;
  // For reference purposes...
  // const uint8_t head[9]      {  0,  1,  2,  3,  4,  5,  6,  7, 8 };
  // const uint8_t tentacle0[8] {  9, 10, 11, 12, 13, 14, 15, 16    };
  // const uint8_t tentacle1[8] { 17, 18, 19, 20, 21, 22, 23, 24    };
  // const uint8_t tentacle2[8] { 25, 26, 27, 28, 29, 30, 31, 32    };
  // const uint8_t tentacle3[8] { 33, 34, 35, 36, 37, 38, 39        };
  // const uint8_t tentacle4[8] { 40, 41, 42, 43, 44, 45, 46, 47    };
  // const uint8_t tentacle5[8] { 48, 49, 50, 51, 52, 53, 54, 55    };
  // const uint8_t tentacle6[8] { 56, 57, 58, 59, 60, 61, 62, 63    };
#elif defined(PRODUCT_CHAMAELEON64)
  const uint8_t  coordsX[NUM_PIXELS]             { 255, 240, 234, 216, 221, 224, 204, 204, 201, 185, 196, 214, 228, 187, 188, 178, 156, 138, 129, 124, 127, 167, 175, 161, 146, 153, 141, 124, 105, 121, 127, 106, 106, 94, 89, 80, 74, 65, 54, 44, 26, 33, 38, 59, 80, 93, 103, 112, 14, 15, 5, 0, 4, 17, 42, 66, 81, 76, 53, 33, 37, 59, 63, 47 };
  const uint8_t  coordsY[NUM_PIXELS]             { 127, 155, 121, 122, 155, 191, 209, 175, 139, 105, 82, 60, 43, 165, 193, 135, 144, 142, 110, 75, 36, 171, 225, 199, 172, 244, 211, 161, 150, 194, 244, 255, 219, 187, 237, 209, 173, 233, 192, 216, 233, 187, 155, 150, 138, 105, 74, 40, 184, 154, 124, 90, 53, 19, 0, 9, 39, 80, 96, 76, 33, 30, 63, 57 };
  const uint8_t  angles[NUM_PIXELS]              { 179, 192, 176, 175, 195, 212, 225, 210, 188, 158, 146, 141, 139, 211, 226, 187, 209, 233, 95, 85, 89, 226, 243, 244, 246, 1, 4, 19, 58, 19, 14, 23, 27, 43, 33, 44, 63, 44, 62, 57, 57, 71, 86, 85, 91, 31, 65, 79, 77, 90, 255, 15, 30, 43, 55, 61, 61, 41, 22, 27, 45, 54, 44, 40 };
  const uint8_t  radii[NUM_PIXELS]               { 206, 185, 168, 135, 150, 185, 178, 137, 107, 83, 122, 172, 213, 101, 134, 64, 32, 3, 0, 65, 137, 80, 172, 116, 59, 191, 126, 31, 28, 93, 186, 210, 144, 95, 185, 144, 99, 197, 150, 195, 241, 175, 141, 101, 57, 43, 77, 132, 204, 182, 196, 215, 236, 255, 253, 215, 153, 97, 118, 167, 210, 188, 137, 166 };
  static_assert(NUM_PIXELS == ARRAY_SIZE2(radii), "");
  const uint8_t (&radiusProxy)[NUM_PIXELS] = radii;
#elif defined(PRODUCT_1628_RINGS)
  // Yes, this is 1628 pixels ... all driven by one ESP8266
  // 20 concentric rings of pixel goodness!
  const uint8_t  coordsX[NUM_PIXELS] { 134, 128, 121, 128, 140, 139, 134, 128, 121, 116, 115, 116, 121, 128, 134, 139, 147, 146, 143, 139, 134, 129, 123, 118, 113, 110, 109, 109, 110, 113, 118, 123, 129, 134, 139, 143, 146, 153, 152, 151, 148, 144, 139, 134, 129, 123, 118, 113, 109, 106, 103, 102, 102, 103, 106, 109, 113, 118, 123, 129, 134, 139, 144, 148, 151, 152, 159, 159, 158, 155, 152, 149, 144, 139, 134, 129, 123, 118, 113, 109, 104, 101, 98, 97, 96, 96, 97, 98, 101, 104, 109, 113, 118, 123, 129, 134, 139, 144, 149, 152, 155, 158, 159, 166, 165, 164, 162, 160, 157, 153, 149, 144, 139, 134, 129, 124, 118, 113, 108, 104, 100, 97, 94, 92, 90, 89, 89, 90, 92, 94, 97, 100, 104, 108, 113, 118, 124, 129, 134, 139, 144, 149, 153, 157, 160, 162, 164, 165, 172, 172, 171, 169, 167, 165, 161, 158, 154, 149, 144, 139, 134, 129, 124, 118, 113, 108, 104, 99, 95, 92, 89, 87, 85, 84, 83, 83, 84, 85, 87, 89, 92, 95, 99, 104, 108, 113, 118, 124, 129, 134, 139, 144, 149, 154, 158, 161, 165, 167, 169, 171, 172, 179, 178, 177, 176, 174, 172, 169, 166, 163, 159, 154, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 101, 96, 92, 89, 86, 83, 81, 79, 78, 77, 77, 77, 78, 79, 81, 83, 86, 89, 92, 96, 101, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 154, 159, 163, 166, 169, 172, 174, 176, 177, 178, 185, 185, 184, 183, 181, 179, 177, 174, 171, 167, 163, 159, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 96, 92, 88, 84, 81, 78, 76, 74, 72, 71, 70, 70, 70, 71, 72, 74, 76, 78, 81, 84, 88, 92, 96, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 159, 163, 167, 171, 174, 177, 179, 181, 183, 184, 185, 191, 191, 190, 189, 188, 186, 184, 181, 178, 175, 172, 168, 164, 159, 155, 150, 145, 140, 
                                       135, 130, 125, 120, 115, 110, 105, 100, 96, 91, 87, 83, 80, 77, 74, 71, 69, 67, 66, 65, 64, 64, 64, 65, 66, 67, 69, 71, 74, 77, 80, 83, 87, 91, 96, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 159, 164, 168, 172, 175, 178, 181, 184, 186, 188, 189, 190, 191, 198, 197, 197, 196, 195, 193, 191, 189, 186, 183, 180, 176, 172, 168, 164, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 91, 87, 83, 79, 75, 72, 69, 66, 64, 62, 60, 59, 58, 58, 57, 58, 58, 59, 60, 62, 64, 66, 69, 72, 75, 79, 83, 87, 91, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 164, 168, 172, 176, 180, 183, 186, 189, 191, 193, 195, 196, 197, 197, 204, 204, 203, 202, 201, 200, 198, 196, 193, 191, 188, 184, 181, 177, 173, 169, 164, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 91, 86, 82, 78, 74, 71, 67, 64, 62, 59, 57, 55, 54, 53, 52, 51, 51, 51, 52, 53, 54, 55, 57, 59, 62, 64, 67, 71, 74, 78, 82, 86, 91, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 164, 169, 173, 177, 181, 184, 188, 191, 193, 196, 198, 200, 201, 202, 203, 204, 210, 210, 210, 209, 208, 206, 205, 203, 201, 198, 195, 192, 189, 185, 181, 177, 173, 169, 164, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 91, 86, 82, 78, 74, 70, 66, 63, 60, 57, 54, 52, 50, 49, 47, 46, 45, 45, 45, 45, 45, 46, 47, 49, 50, 52, 54, 57, 60, 63, 66, 70, 74, 78, 82, 86, 91, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 164, 169, 173, 177, 181, 185, 189, 192, 195, 198, 201, 203, 205, 206, 208, 209, 210, 210, 217, 217, 216, 215, 214, 213, 212, 210, 208, 205, 203, 200, 197, 193, 190, 186, 182, 178, 174, 
                                       169, 165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 86, 81, 77, 73, 69, 65, 62, 58, 55, 52, 50, 47, 45, 43, 42, 41, 40, 39, 38, 38, 38, 39, 40, 41, 42, 43, 45, 47, 50, 52, 55, 58, 62, 65, 69, 73, 77, 81, 86, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 169, 174, 178, 182, 186, 190, 193, 197, 200, 203, 205, 208, 210, 212, 213, 214, 215, 216, 217, 223, 223, 223, 222, 221, 220, 218, 217, 215, 212, 210, 207, 204, 201, 198, 194, 190, 187, 182, 178, 174, 169, 165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 86, 81, 77, 73, 68, 65, 61, 57, 54, 51, 48, 45, 43, 40, 38, 37, 35, 34, 33, 32, 32, 32, 32, 32, 33, 34, 35, 37, 38, 40, 43, 45, 48, 51, 54, 57, 61, 65, 68, 73, 77, 81, 86, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 169, 174, 178, 182, 187, 190, 194, 198, 201, 204, 207, 210, 212, 215, 217, 218, 220, 221, 222, 223, 223, 230, 229, 229, 228, 227, 226, 225, 223, 221, 219, 217, 214, 212, 208, 205, 202, 198, 194, 191, 186, 182, 178, 173, 169, 164, 159, 154, 149, 144, 139, 134, 129, 124, 119, 113, 108, 103, 98, 94, 89, 84, 79, 75, 71, 67, 62, 59, 55, 51, 48, 45, 42, 39, 37, 35, 33, 31, 29, 28, 27, 26, 26, 26, 26, 26, 26, 27, 28, 29, 31, 33, 35, 37, 39, 42, 45, 48, 51, 55, 59, 62, 67, 71, 75, 79, 84, 89, 94, 98, 103, 108, 113, 119, 124, 129, 134, 139, 144, 149, 154, 159, 164, 169, 173, 178, 182, 186, 191, 194, 198, 202, 205, 208, 212, 214, 217, 219, 221, 223, 225, 226, 227, 228, 229, 229, 236, 236, 235, 235, 234, 233, 232, 230, 228, 227, 224, 222, 219, 217, 214, 211, 207, 204, 200, 196, 192, 188, 184, 179, 175, 170, 166, 161, 156, 151, 
                                       146, 141, 136, 131, 126, 121, 116, 111, 106, 101, 96, 92, 87, 82, 78, 73, 69, 65, 61, 57, 53, 50, 46, 43, 40, 37, 34, 32, 30, 27, 26, 24, 23, 21, 21, 20, 19, 19, 19, 19, 20, 21, 21, 23, 24, 26, 27, 30, 32, 34, 37, 40, 43, 46, 50, 53, 57, 61, 65, 69, 73, 78, 82, 87, 92, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 151, 156, 161, 166, 170, 175, 179, 184, 188, 192, 196, 200, 204, 207, 211, 214, 217, 219, 222, 224, 227, 228, 230, 232, 233, 234, 235, 235, 236, 242, 242, 242, 241, 240, 239, 238, 237, 235, 233, 231, 229, 226, 224, 221, 218, 215, 211, 208, 204, 200, 196, 192, 188, 183, 179, 174, 170, 165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 85, 81, 76, 72, 67, 63, 59, 55, 51, 47, 44, 40, 37, 34, 31, 29, 26, 24, 22, 20, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 14, 15, 16, 17, 18, 20, 22, 24, 26, 29, 31, 34, 37, 40, 44, 47, 51, 55, 59, 63, 67, 72, 76, 81, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 174, 179, 183, 188, 192, 196, 200, 204, 208, 211, 215, 218, 221, 224, 226, 229, 231, 233, 235, 237, 238, 239, 240, 241, 242, 242, 249, 249, 248, 248, 247, 246, 245, 243, 241, 240, 237, 235, 233, 230, 227, 224, 221, 217, 214, 210, 206, 202, 198, 193, 189, 184, 180, 175, 170, 165, 160, 155, 150, 145, 139, 134, 129, 124, 118, 113, 108, 103, 98, 93, 88, 83, 78, 73, 68, 64, 60, 55, 51, 47, 43, 40, 36, 33, 30, 27, 24, 21, 19, 16, 14, 13, 11, 10, 9, 8, 7, 7, 6, 6, 7, 7, 8, 9, 10, 11, 13, 14, 16, 19, 21, 24, 27, 30, 33, 36, 40, 43, 47, 51, 55, 60, 64, 68, 73, 78, 83, 88, 93, 98, 103, 108, 113, 118, 124, 129, 134, 139, 145, 150, 155, 160, 165, 170, 175, 180, 184, 189, 193, 198, 202, 206, 
                                       210, 214, 217, 221, 224, 227, 230, 233, 235, 237, 240, 241, 243, 245, 246, 247, 248, 248, 249, 255, 255, 255, 254, 253, 253, 251, 250, 249, 247, 245, 243, 241, 239, 236, 234, 231, 228, 224, 221, 218, 214, 210, 206, 202, 198, 194, 190, 185, 181, 176, 172, 167, 162, 157, 152, 147, 142, 138, 133, 128, 122, 117, 113, 108, 103, 98, 93, 88, 83, 79, 74, 70, 65, 61, 57, 53, 49, 45, 41, 37, 34, 31, 27, 24, 21, 19, 16, 14, 12, 10, 8, 6, 5, 4, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 2, 4, 5, 6, 8, 10, 12, 14, 16, 19, 21, 24, 27, 31, 34, 37, 41, 45, 49, 53, 57, 61, 65, 70, 74, 79, 83, 88, 93, 98, 103, 108, 113, 117, 122, 127, 133, 138, 142, 147, 152, 157, 162, 167, 172, 176, 181, 185, 190, 194, 198, 202, 206, 210, 214, 218, 221, 224, 228, 231, 234, 236, 239, 241, 243, 245, 247, 249, 250, 251, 253, 253, 254, 255, 255 };
  const uint8_t  coordsY[NUM_PIXELS] { 128, 134, 128, 121, 128, 134, 139, 140, 139, 134, 128, 121, 116, 115, 116, 121, 128, 133, 138, 142, 145, 147, 146, 144, 141, 136, 130, 125, 119, 114, 111, 109, 108, 110, 113, 117, 122, 128, 133, 138, 143, 147, 150, 152, 153, 153, 151, 149, 145, 141, 136, 130, 125, 119, 114, 110, 106, 104, 102, 102, 103, 105, 108, 112, 117, 122, 128, 133, 138, 143, 148, 151, 155, 157, 159, 159, 159, 158, 156, 153, 150, 145, 141, 136, 130, 125, 119, 114, 110, 105, 102, 99, 97, 96, 96, 96, 98, 100, 104, 107, 112, 117, 122, 128, 133, 138, 143, 148, 152, 156, 159, 162, 164, 165, 166, 166, 165, 163, 161, 158, 154, 150, 145, 141, 135, 130, 125, 120, 114, 110, 105, 101, 97, 94, 92, 90, 89, 89, 90, 91, 93, 96, 99, 103, 107, 112, 117, 122, 128, 133, 138, 143, 148, 152, 157, 160, 164, 167, 169, 171, 172, 172, 172, 171, 170, 168, 165, 162, 159, 155, 150, 145, 141, 135, 130, 125, 120, 114, 110, 105, 100, 96, 93, 90, 87, 85, 84, 83, 83, 83, 84, 86, 88, 91, 95, 98, 103, 107, 112, 117, 122, 128, 133, 138, 143, 148, 152, 157, 161, 164, 168, 171, 173, 175, 177, 178, 178, 178, 178, 177, 175, 173, 171, 168, 164, 161, 157, 152, 148, 143, 138, 133, 128, 122, 117, 112, 107, 103, 98, 94, 91, 87, 84, 82, 80, 78, 77, 77, 77, 77, 78, 80, 82, 84, 87, 91, 94, 98, 103, 107, 112, 117, 122, 128, 133, 138, 143, 148, 152, 157, 161, 165, 169, 172, 175, 178, 180, 182, 183, 184, 185, 185, 184, 183, 182, 180, 178, 175, 172, 169, 165, 161, 157, 152, 148, 143, 138, 133, 128, 122, 117, 112, 107, 103, 98, 94, 90, 86, 83, 80, 77, 75, 73, 72, 71, 70, 70, 71, 72, 73, 75, 77, 80, 83, 86, 90, 94, 98, 103, 107, 112, 117, 122, 128, 133, 138, 143, 148, 152, 157, 162, 166, 170, 173, 177, 180, 183, 185, 187, 189, 190, 
                                       191, 191, 191, 191, 190, 189, 187, 185, 183, 180, 177, 173, 170, 166, 162, 157, 152, 148, 143, 138, 133, 128, 122, 117, 112, 107, 103, 98, 93, 89, 85, 82, 78, 75, 72, 70, 68, 66, 65, 64, 64, 64, 64, 65, 66, 68, 70, 72, 75, 78, 82, 85, 89, 93, 98, 103, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 157, 162, 166, 170, 174, 178, 181, 185, 187, 190, 192, 194, 195, 196, 197, 198, 198, 197, 196, 195, 194, 192, 190, 187, 185, 181, 178, 174, 170, 166, 162, 157, 153, 148, 143, 138, 133, 128, 122, 117, 112, 107, 102, 98, 93, 89, 85, 81, 77, 74, 70, 68, 65, 63, 61, 60, 59, 58, 57, 57, 58, 59, 60, 61, 63, 65, 68, 70, 74, 77, 81, 85, 89, 93, 98, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 157, 162, 166, 171, 175, 179, 182, 186, 189, 192, 195, 197, 199, 201, 202, 203, 204, 204, 204, 204, 203, 202, 201, 199, 197, 195, 192, 189, 186, 182, 179, 175, 171, 166, 162, 157, 153, 148, 143, 138, 133, 128, 122, 117, 112, 107, 102, 98, 93, 89, 84, 80, 76, 73, 69, 66, 63, 60, 58, 56, 54, 53, 52, 51, 51, 51, 51, 52, 53, 54, 56, 58, 60, 63, 66, 69, 73, 76, 80, 84, 89, 93, 98, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 157, 162, 167, 171, 175, 179, 183, 187, 190, 194, 197, 199, 202, 204, 206, 207, 208, 209, 210, 210, 210, 210, 209, 208, 207, 206, 204, 202, 199, 197, 194, 190, 187, 183, 179, 175, 171, 167, 162, 157, 153, 148, 143, 138, 133, 128, 122, 117, 112, 107, 102, 98, 93, 88, 84, 80, 76, 72, 68, 65, 61, 58, 56, 53, 51, 49, 48, 47, 46, 45, 45, 45, 45, 46, 47, 48, 49, 51, 53, 56, 58, 61, 65, 68, 72, 76, 80, 84, 88, 93, 98, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 157, 162, 167, 171, 176, 180, 184, 188, 192, 195, 198, 201, 204, 206, 209, 
                                       211, 212, 214, 215, 216, 216, 217, 217, 216, 216, 215, 214, 212, 211, 209, 206, 204, 201, 198, 195, 192, 188, 184, 180, 176, 171, 167, 162, 157, 153, 148, 143, 138, 133, 128, 122, 117, 112, 107, 102, 98, 93, 88, 84, 79, 75, 71, 67, 63, 60, 57, 54, 51, 49, 46, 44, 43, 41, 40, 39, 39, 38, 38, 39, 39, 40, 41, 43, 44, 46, 49, 51, 54, 57, 60, 63, 67, 71, 75, 79, 84, 88, 93, 98, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 162, 167, 172, 176, 180, 185, 189, 192, 196, 199, 203, 206, 209, 211, 213, 216, 217, 219, 220, 221, 222, 223, 223, 223, 223, 222, 221, 220, 219, 217, 216, 213, 211, 209, 206, 203, 199, 196, 192, 189, 185, 180, 176, 172, 167, 162, 158, 153, 148, 143, 138, 133, 128, 122, 117, 112, 107, 102, 97, 93, 88, 83, 79, 75, 70, 66, 63, 59, 56, 52, 49, 46, 44, 42, 39, 38, 36, 35, 34, 33, 32, 32, 32, 32, 33, 34, 35, 36, 38, 39, 42, 44, 46, 49, 52, 56, 59, 63, 66, 70, 75, 79, 83, 88, 93, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 167, 172, 177, 181, 185, 190, 193, 197, 201, 204, 208, 211, 214, 216, 219, 221, 223, 225, 226, 227, 228, 229, 229, 229, 229, 229, 229, 228, 227, 225, 224, 222, 220, 217, 215, 212, 209, 206, 203, 199, 195, 192, 187, 183, 179, 174, 170, 165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 85, 81, 76, 72, 68, 63, 60, 56, 52, 49, 46, 43, 40, 38, 35, 33, 31, 30, 28, 27, 26, 26, 26, 26, 26, 26, 27, 28, 29, 30, 32, 34, 36, 39, 41, 44, 47, 51, 54, 58, 62, 65, 70, 74, 78, 83, 88, 92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 152, 157, 162, 167, 172, 176, 181, 185, 189, 193, 197, 201, 205, 208, 211, 214, 217, 220, 223, 225, 227, 229, 231, 232, 233, 234, 235, 236, 
                                       236, 236, 236, 235, 235, 234, 233, 231, 230, 228, 226, 224, 221, 219, 216, 213, 210, 206, 203, 199, 195, 191, 187, 183, 178, 174, 169, 165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 86, 81, 77, 72, 68, 64, 60, 56, 52, 49, 45, 42, 39, 36, 34, 31, 29, 27, 25, 24, 22, 21, 20, 20, 19, 19, 19, 19, 20, 21, 22, 23, 24, 26, 28, 30, 32, 35, 38, 41, 44, 47, 50, 54, 58, 62, 66, 70, 74, 79, 83, 88, 93, 98, 103, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 162, 167, 172, 177, 181, 186, 190, 194, 198, 202, 206, 210, 213, 216, 219, 222, 225, 228, 230, 232, 234, 236, 238, 239, 240, 241, 242, 242, 242, 242, 242, 242, 241, 240, 239, 238, 236, 234, 232, 230, 228, 225, 222, 219, 216, 213, 210, 206, 202, 198, 194, 190, 186, 181, 177, 172, 167, 162, 158, 153, 148, 143, 138, 133, 128, 122, 117, 112, 107, 102, 97, 93, 88, 83, 78, 74, 69, 65, 61, 57, 53, 49, 45, 42, 39, 36, 33, 30, 27, 25, 23, 21, 19, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 14, 15, 16, 17, 19, 21, 23, 25, 27, 30, 33, 36, 39, 42, 45, 49, 53, 57, 61, 65, 69, 74, 78, 83, 88, 93, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 154, 159, 164, 169, 174, 178, 183, 188, 192, 197, 201, 205, 209, 213, 216, 220, 223, 226, 229, 232, 235, 237, 239, 241, 243, 244, 246, 247, 247, 248, 248, 249, 249, 248, 248, 247, 246, 245, 243, 242, 240, 238, 236, 233, 231, 228, 225, 221, 218, 215, 211, 207, 203, 199, 194, 190, 185, 181, 176, 171, 166, 161, 156, 151, 146, 141, 135, 130, 125, 120, 114, 109, 104, 99, 94, 89, 84, 79, 74, 70, 65, 61, 56, 52, 48, 44, 40, 37, 34, 30, 27, 24, 22, 19, 17, 15, 13, 12, 10, 9, 8, 7, 7, 6, 6, 7, 7, 8, 8, 9, 11, 12, 14, 16, 18, 20, 23, 26, 29, 32, 35, 
                                       39, 42, 46, 50, 54, 58, 63, 67, 72, 77, 81, 86, 91, 96, 101, 107, 112, 117, 122, 128, 133, 138, 142, 147, 152, 157, 162, 167, 172, 176, 181, 185, 190, 194, 198, 202, 206, 210, 214, 218, 221, 224, 228, 231, 234, 236, 239, 241, 243, 245, 247, 249, 250, 251, 253, 253, 254, 255, 255, 255, 255, 255, 254, 253, 253, 251, 250, 249, 247, 245, 243, 241, 239, 236, 234, 231, 228, 224, 221, 218, 214, 210, 206, 202, 198, 194, 190, 185, 181, 176, 172, 167, 162, 157, 152, 147, 142, 138, 133, 128, 122, 117, 113, 108, 103, 98, 93, 88, 83, 79, 74, 70, 65, 61, 57, 53, 49, 45, 41, 37, 34, 31, 27, 24, 21, 19, 16, 14, 12, 10, 8, 6, 5, 4, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 2, 4, 5, 6, 8, 10, 12, 14, 16, 19, 21, 24, 27, 31, 34, 37, 41, 45, 49, 53, 57, 61, 65, 70, 74, 79, 83, 88, 93, 98, 103, 108, 113, 117, 122 };
  const uint8_t  angles[NUM_PIXELS]  { 0, 64, 128, 191, 0, 21, 43, 64, 85, 106, 128, 149, 170, 191, 213, 234, 0, 12, 24, 36, 49, 61, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182, 194, 206, 219, 231, 243, 0, 9, 18, 26, 35, 44, 53, 62, 70, 79, 88, 97, 106, 114, 123, 132, 141, 149, 158, 167, 176, 185, 193, 202, 211, 220, 229, 237, 246, 0, 7, 14, 21, 28, 34, 41, 48, 55, 62, 69, 76, 83, 90, 96, 103, 110, 117, 124, 131, 138, 145, 152, 159, 165, 172, 179, 186, 193, 200, 207, 214, 221, 227, 234, 241, 248, 0, 6, 11, 17, 23, 28, 34, 40, 45, 51, 57, 62, 68, 74, 79, 85, 91, 96, 102, 108, 113, 119, 125, 130, 136, 142, 147, 153, 159, 164, 170, 176, 181, 187, 193, 198, 204, 210, 215, 221, 227, 232, 238, 244, 249, 0, 5, 10, 14, 19, 24, 29, 34, 38, 43, 48, 53, 58, 63, 67, 72, 77, 82, 87, 91, 96, 101, 106, 111, 115, 120, 125, 130, 135, 140, 144, 149, 154, 159, 164, 168, 173, 178, 183, 188, 192, 197, 202, 207, 212, 217, 221, 226, 231, 236, 241, 245, 250, 0, 4, 8, 12, 16, 21, 25, 29, 33, 37, 41, 45, 49, 53, 58, 62, 66, 70, 74, 78, 82, 86, 90, 95, 99, 103, 107, 111, 115, 119, 123, 128, 132, 136, 140, 144, 148, 152, 156, 160, 165, 169, 173, 177, 181, 185, 189, 193, 197, 202, 206, 210, 214, 218, 222, 226, 230, 234, 239, 243, 247, 251, 0, 4, 7, 11, 15, 18, 22, 26, 29, 33, 36, 40, 44, 47, 51, 55, 58, 62, 66, 69, 73, 77, 80, 84, 87, 91, 95, 98, 102, 106, 109, 113, 117, 120, 124, 128, 131, 135, 138, 142, 146, 149, 153, 157, 160, 164, 168, 171, 175, 179, 182, 186, 189, 193, 197, 200, 204, 208, 211, 215, 219, 222, 226, 230, 233, 237, 240, 244, 248, 251, 0, 3, 7, 10, 13, 16, 20, 23, 26, 29, 33, 36, 39, 43, 46, 49, 52, 56, 59, 62, 65, 69, 72, 75, 78, 82, 85, 88, 92, 95, 98, 101, 105, 108, 111, 114, 118, 121, 124, 127, 
                                       131, 134, 137, 141, 144, 147, 150, 154, 157, 160, 163, 167, 170, 173, 177, 180, 183, 186, 190, 193, 196, 199, 203, 206, 209, 213, 216, 219, 222, 226, 229, 232, 235, 239, 242, 245, 248, 252, 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 0, 3, 5, 8, 11, 14, 16, 19, 22, 24, 27, 30, 33, 35, 38, 41, 43, 46, 49, 52, 54, 57, 60, 62, 65, 68, 71, 73, 76, 79, 81, 84, 87, 90, 92, 95, 98, 100, 103, 106, 109, 111, 114, 117, 119, 122, 125, 128, 130, 133, 136, 138, 141, 144, 146, 149, 152, 155, 157, 160, 163, 165, 168, 171, 174, 176, 179, 182, 184, 187, 190, 193, 195, 198, 201, 203, 206, 209, 212, 214, 217, 220, 222, 225, 228, 231, 233, 236, 239, 241, 244, 247, 250, 252, 0, 3, 5, 8, 10, 13, 15, 17, 20, 23, 25, 27, 30, 33, 35, 37, 40, 43, 45, 48, 50, 53, 55, 57, 60, 63, 65, 68, 70, 73, 75, 78, 80, 83, 85, 88, 90, 93, 95, 98, 100, 102, 105, 107, 110, 113, 115, 118, 120, 123, 125, 128, 130, 133, 135, 138, 140, 142, 145, 147, 150, 153, 155, 158, 160, 163, 165, 168, 170, 173, 175, 178, 180, 182, 185, 187, 190, 193, 195, 198, 200, 203, 205, 208, 210, 213, 215, 218, 220, 223, 225, 228, 230, 233, 235, 238, 240, 243, 245, 247, 250, 252, 0, 2, 5, 7, 9, 12, 14, 16, 19, 21, 23, 26, 28, 30, 32, 35, 37, 39, 42, 44, 46, 49, 51, 53, 56, 58, 60, 63, 65, 67, 70, 72, 74, 77, 79, 81, 83, 86, 88, 90, 93, 95, 97, 100, 102, 104, 107, 109, 111, 114, 
                                       116, 118, 121, 123, 125, 128, 130, 132, 134, 137, 139, 141, 144, 146, 148, 151, 153, 155, 158, 160, 162, 165, 167, 169, 172, 174, 176, 179, 181, 183, 185, 188, 190, 192, 195, 197, 199, 202, 204, 206, 209, 211, 213, 216, 218, 220, 223, 225, 227, 230, 232, 234, 236, 239, 241, 243, 246, 248, 250, 253, 0, 2, 4, 6, 9, 11, 13, 15, 17, 19, 22, 24, 26, 28, 30, 32, 35, 37, 39, 41, 43, 45, 48, 50, 52, 54, 56, 58, 61, 63, 65, 67, 69, 71, 73, 76, 78, 80, 82, 84, 86, 89, 91, 93, 95, 97, 99, 102, 104, 106, 108, 110, 112, 115, 117, 119, 121, 123, 125, 128, 130, 132, 134, 136, 138, 140, 143, 145, 147, 149, 151, 153, 156, 158, 160, 162, 164, 166, 169, 171, 173, 175, 177, 179, 182, 184, 186, 188, 190, 192, 194, 197, 199, 201, 203, 205, 207, 210, 212, 214, 216, 218, 220, 223, 225, 227, 229, 231, 233, 236, 238, 240, 242, 244, 246, 249, 251, 253, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 0, 2, 4, 6, 8, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26, 28, 30, 32, 34, 36, 38, 40, 42, 43, 45, 47, 49, 51, 53, 55, 57, 59, 60, 62, 64, 66, 68, 70, 72, 74, 76, 77, 79, 81, 83, 85, 87, 89, 91, 93, 94, 96, 98, 100, 102, 104, 106, 108, 110, 111, 113, 115, 117, 119, 121, 123, 
                                       125, 127, 128, 130, 132, 134, 136, 138, 140, 142, 144, 145, 147, 149, 151, 153, 155, 157, 159, 161, 162, 164, 166, 168, 170, 172, 174, 176, 178, 179, 181, 183, 185, 187, 189, 191, 193, 195, 196, 198, 200, 202, 204, 206, 208, 210, 212, 213, 215, 217, 219, 221, 223, 225, 227, 229, 230, 232, 234, 236, 238, 240, 242, 244, 246, 247, 249, 251, 253, 0, 2, 4, 5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27, 29, 31, 32, 34, 36, 38, 40, 41, 43, 45, 47, 48, 50, 52, 54, 56, 57, 59, 61, 63, 65, 66, 68, 70, 72, 74, 75, 77, 79, 81, 83, 84, 86, 88, 90, 92, 93, 95, 97, 99, 101, 102, 104, 106, 108, 110, 111, 113, 115, 117, 119, 120, 122, 124, 126, 128, 129, 131, 133, 135, 136, 138, 140, 142, 144, 145, 147, 149, 151, 153, 154, 156, 158, 160, 162, 163, 165, 167, 169, 171, 172, 174, 176, 178, 180, 181, 183, 185, 187, 189, 190, 192, 194, 196, 198, 199, 201, 203, 205, 207, 208, 210, 212, 214, 215, 217, 219, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 239, 241, 242, 244, 246, 248, 250, 251, 253, 0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 23, 25, 26, 28, 30, 32, 33, 35, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 55, 56, 58, 60, 62, 63, 65, 67, 69, 70, 72, 74, 76, 77, 79, 81, 83, 84, 86, 88, 90, 91, 93, 95, 97, 98, 100, 102, 104, 106, 107, 109, 111, 113, 114, 116, 118, 120, 121, 123, 125, 127, 128, 130, 132, 134, 135, 137, 139, 141, 142, 144, 146, 148, 149, 151, 153, 155, 157, 158, 160, 162, 164, 165, 167, 169, 171, 172, 174, 176, 178, 179, 181, 183, 185, 186, 188, 190, 192, 193, 195, 197, 199, 200, 202, 204, 206, 208, 209, 211, 213, 215, 216, 218, 220, 222, 223, 225, 227, 229, 230, 232, 234, 236, 237, 239, 241, 243, 244, 246, 248, 250, 251, 253, 0, 2, 3, 5, 6, 8, 10, 
                                       11, 13, 14, 16, 18, 19, 21, 22, 24, 26, 27, 29, 30, 32, 33, 35, 37, 38, 40, 41, 43, 45, 46, 48, 49, 51, 53, 54, 56, 57, 59, 61, 62, 64, 65, 67, 69, 70, 72, 73, 75, 77, 78, 80, 81, 83, 84, 86, 88, 89, 91, 92, 94, 96, 97, 99, 100, 102, 104, 105, 107, 108, 110, 112, 113, 115, 116, 118, 120, 121, 123, 124, 126, 128, 129, 131, 132, 134, 135, 137, 139, 140, 142, 143, 145, 147, 148, 150, 151, 153, 155, 156, 158, 159, 161, 163, 164, 166, 167, 169, 171, 172, 174, 175, 177, 179, 180, 182, 183, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 201, 202, 204, 206, 207, 209, 210, 212, 214, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 233, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 252, 253 };
  const uint8_t  radii[NUM_PIXELS]   { 13, 13, 13, 13, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 



};
  const uint8_t (&radiusProxy)[NUM_PIXELS] = radii;

#else
  #error "Unknown / Unsupported product ... no mappings defined"
#endif

#if IS_FIBONACCI
  static_assert(NUM_PIXELS == ARRAY_SIZE2(physicalToFibonacci), "");
  static_assert(NUM_PIXELS == ARRAY_SIZE2(fibonacciToPhysical), "");
#endif

// What is radiusProxy?  It could be the actual radius, or it could be something
// that is used "in place of" the radius during effects processing.
// Use reference to original array; avoids repeating preprocessor checks throughout the code....

static_assert(HAS_COORDINATE_MAP, "");
static_assert(NUM_PIXELS == ARRAY_SIZE2(coordsX), "");
static_assert(NUM_PIXELS == ARRAY_SIZE2(coordsY), "");
static_assert(NUM_PIXELS == ARRAY_SIZE2(angles), "");

#if IS_FIBONACCI // drawSpiralLine() uses angles[] and physicalToFibonacci[]
void drawSpiralLine(uint8_t angle, int step, CRGB color)
{
  int startIndex = 0;
  int smallestAngleDifference = 255;

  // find the outermost led closest to the desired angle
  for (int i = 0; i < NUM_PIXELS; i++) {
    int j = physicalToFibonacci[i];
    if (j < step) continue;
    if (!(j + step >= NUM_PIXELS)) continue; // not outermost
    uint8_t a = angles[i];
    if (a == angle) startIndex = i;
    else if (angle - a > 0 && angle - a < smallestAngleDifference) {
      smallestAngleDifference = angle - a;
      startIndex = i;
    }
  }

  // draw the starting LED
  leds[startIndex] += color;

  // draw to center from outer start
  int f = physicalToFibonacci[startIndex];
  while (f - step >= 0 && f - step < NUM_PIXELS) {
    leds[fibonacciToPhysical[f]] += color;
    f = f - step;
  }
}
#endif

#if HAS_COORDINATE_MAP

// given an angle and radius (and delta for both), set pixels that fall inside that range
void setPixelAR(uint8_t angle, uint8_t dAngle, uint8_t radius, uint8_t dRadius, CRGB color)
{
  uint8_t endRadius   = qadd8(radius, dRadius);
  uint8_t startRadius = qsub8(radius, dRadius);

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
  // TODO: Change from pre-processor defines to `static const bool` values where possible
    uint8_t ro = radiusProxy[i];
    // only mess with the pixel when it's radius is within the target radius
    if (ro <= endRadius && ro >= startRadius) {
      // Get pixel's angle (unit256)
      uint8_t ao = angles[i];
      // set adiff to abs(ao - angle) ... relies on unsigned underflow resulting in larger value
      uint8_t adiff = min(sub8(ao,angle), sub8(angle, ao));
      // only mess with the pixel when it's angle is within range of target
      if (adiff <= dAngle) {
        leds[i] = color;
      }
    }
  }
}

// given an angle and radius (and delta for both), add color to pixels that fall inside that range
void andPixelAR(uint8_t angle, uint8_t dAngle, uint8_t startRadius, uint8_t endRadius, CRGB color)
{
  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint8_t ro = radiusProxy[i];
    // only mess with the pixel when it's radius is within the target radius
    if (ro <= endRadius && ro >= startRadius) {
      // Get pixel's angle (unit256)
      uint8_t ao = angles[i];
      // set adiff to abs(ao - angle) ... relies on unsigned underflow resulting in larger value
      uint8_t adiff = min(sub8(ao,angle), sub8(angle, ao));
      // only mess with the pixel when it's angle is within range of target
      if (adiff <= dAngle) {
        leds[i] += color;
      }
    }
  }
}

// given an angle and radius (and delta for both), set pixels that fall inside that range,
// fading the color from full-color at center, to off (black) at the outer edges.
void antialiasPixelAR(uint8_t angle, uint8_t dAngle, uint8_t startRadius, uint8_t endRadius, CRGB color, CRGB leds[], int _NUM_PIXELS)
{
  // NOTE:
  // An earlier version of this routine had significant bugs.
  // Do NOT use the version which does qsub8(max(...), min()),
  // as it does not handle angle overflow well.
  // This version does it properly:
  // 1. subtract both ways
  // 2. note that unsigned underlow will make the negative result really large instead
  // 3. take smaller value
  // This is the absolute offset from the target angle
  for (uint16_t i = 0; i < _NUM_PIXELS; i++) {
    uint8_t ro = radiusProxy[i];
    // only mess with the pixel when it's radius is within the target radius
    if (ro <= endRadius && ro >= startRadius) {
      // Get pixel's angle (unit256)
      uint8_t ao = angles[i];
      // set adiff to abs(ao - angle) ... relies on unsigned underflow resulting in larger value
      uint8_t adiff = min(sub8(ao,angle), sub8(angle, ao));
      // only mess with the pixel when it's angle is within range of target
      if (adiff <= dAngle) {
        // map the intensity of the color so it fades to black at edge of allowed angle
        uint8_t fade = map(adiff, 0, dAngle, 0, 255);
        CRGB faded = color;
        // fade the target color based on how far the angle was from the target
        faded.fadeToBlackBy(fade);
        // add the faded color (as an overlay) to existing colors
        leds[i] += faded;
      }
    }
  }
}

// TODO - anglePalette() from Fib32 sets `hues = 256 / NUM_PIXELS' ... which is ZERO(!)
//        The other similar functions are hard-coded to `hues = 1` even on Fib32.
//        Likely a bug in Fib32 branch for this one function?
//        Check if other branches did similar, or set to hard-coded value of 1?
void anglePalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t x = angles[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void radiusPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {

    unsigned tmp = ((unsigned)(radiusProxy[i]));
#if ((NUM_PIXELS & (NUM_PIXELS-1)) == 0) // Power-of-two, so no need to check
    uint8_t r = tmp;
#else
    uint8_t r = tmp > 255 ? 255 : tmp;
#endif
    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (r * hues));
  }
}

void xPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t x = coordsX[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void yPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (y * hues));
  }
}

void xyPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t x = coordsX[i];
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - ((x + y) * hues));
  }
}

void angleGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t x = angles[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (x * hues));
  }
}

void radiusGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    unsigned tmp = (unsigned)radiusProxy[i];
#if ((NUM_PIXELS & (NUM_PIXELS-1)) == 0) // Power-of-two, so no need to check
    uint8_t r = tmp;
#else
    uint8_t r = tmp > 255 ? 255 : tmp;
#endif

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (r * hues));
  }
}

void xGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t x = coordsX[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (x * hues));
  }
}

void yGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (y * hues));
  }
}

void xyGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint16_t x = coordsX[i];
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - ((x + y) * hues));
  }
}

void radarSweepPalette() {
  fadeToBlackBy(leds, NUM_PIXELS, 64);

  uint8_t a = beat8(speed);
  uint8_t b = beat88(1);

  for (uint16_t i = 0; i < NUM_PIXELS; i++) {
    uint8_t angle = angles[i];

    if(abs(angle - a) < 3) {
      leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed));
    }
    if(abs(angle - b) < 3) {
      leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) + 85);
    }
  }
}

void drawAnalogClock() {
  const uint8_t hourRadius = 128;   // 128 of 256 radius "units" ==> 1/2
  const uint8_t minuteRadius = 192; // 192 of 256 radius "units" ==> 3/4
  const uint8_t secondRadius = 255; // 255 of 256 radius "units" ==> 1/1

  const uint8_t hourHandWidth   = 8; // angle @ unit256 ~= 11.25000 degrees
  const uint8_t minuteHandWidth = 7; // angle @ unit256 ~=  9.84375 degrees
  const uint8_t secondHandWidth = 6; // angle @ unit256 ~=  8.43750 degrees

  const float degreesPerSecond = 256.0 / 60.0;
  const float degreesPerMinute = 256.0 / 60.0;
  const float degreesPerHour   = 256.0 / 12.0;

  static uint8_t hourAngle   = 0;
  static uint8_t minuteAngle = 0;
  static uint8_t secondAngle = 0;

  EVERY_N_MILLIS(100) {
    float second = timeClient.getSeconds();
    float minute = timeClient.getMinutes() + (second / 60.0);
    float hour   = timeClient.getHours()   + (minute / 60.0);

    hourAngle   = 64u - hour   * degreesPerHour;
    minuteAngle = 64u - minute * degreesPerMinute;
    secondAngle = 64u - second * degreesPerSecond;
  }

  // although can update angles once every 100ms, have to perform fade & overlay with each cycle
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  antialiasPixelAR(secondAngle, secondHandWidth, 0, secondRadius, CRGB::Blue );
  antialiasPixelAR(minuteAngle, minuteHandWidth, 0, minuteRadius, CRGB::Green);
  antialiasPixelAR(hourAngle, hourHandWidth, 0, hourRadius, CRGB::Red);
  // leds[0] = CRGB::Red; // need to rethink, physical LED 0 is not always in the center...
}

#endif

// TODO: `drawSpiralAnalogClock***()` -- config to disable the seconds hand?

#if IS_FIBONACCI // drawSpiralAnalogClock*() calls drawSpiralLine(), which requires fibonacci

void drawSpiralAnalogClock(uint8_t step_h, uint8_t step_m, uint8_t step_s) {
  static uint8_t hourAngle   = 0;
  static uint8_t minuteAngle = 0;
  static uint8_t secondAngle = 0;

  const float degreesPerSecond = 256.0 / 60.0;
  const float degreesPerMinute = 256.0 / 60.0;
  const float degreesPerHour   = 256.0 / 12.0;

  EVERY_N_MILLIS(100) {
    float second = timeClient.getSeconds();
    float minute = timeClient.getMinutes() + (second / 60.0);
    float hour   = timeClient.getHours()   + (minute / 60.0);

    hourAngle   = 64u - hour   * degreesPerHour;
    minuteAngle = 64u - minute * degreesPerMinute;
    secondAngle = 64u - second * degreesPerSecond;
  }

  drawSpiralLine(secondAngle, step_s, CRGB::Blue );
  drawSpiralLine(minuteAngle, step_m, CRGB::Green);
  drawSpiralLine(hourAngle,   step_h, CRGB::Red  );
}
void drawSpiralAnalogClock(uint8_t step) {
  drawSpiralAnalogClock(step, step, step);
}
void drawSpiralAnalogClock13() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(13);
}
void drawSpiralAnalogClock21() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(21);
}
void drawSpiralAnalogClock34() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(34);
}
void drawSpiralAnalogClock55() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(55);
}
void drawSpiralAnalogClock89() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(89);
}
void drawSpiralAnalogClock21and34() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(21);
  drawSpiralAnalogClock(34);
}
void drawSpiralAnalogClock13_21_and_34() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(34, 21, 13);
}
void drawSpiralAnalogClock34_21_and_13() {
  fadeToBlackBy(leds, NUM_PIXELS, clockBackgroundFade);
  drawSpiralAnalogClock(13, 21, 34);
}
#endif

#endif // IS_FIBONACCI || HAS_COORDINATE_MAP
